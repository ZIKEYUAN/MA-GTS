[
 {
  "file_name": "graph_9.json",
  "graph_index": 0,
  "adj": [
   [
    0,
    7,
    7,
    7,
    4,
    2,
    1,
    8,
    1,
    4
   ],
   [
    7,
    0,
    7,
    2,
    8,
    2,
    7,
    4,
    6,
    5
   ],
   [
    7,
    7,
    0,
    4,
    5,
    7,
    4,
    4,
    6,
    10
   ],
   [
    7,
    2,
    4,
    0,
    5,
    7,
    10,
    7,
    5,
    4
   ],
   [
    4,
    8,
    5,
    5,
    0,
    1,
    10,
    10,
    2,
    2
   ],
   [
    2,
    2,
    7,
    7,
    1,
    0,
    2,
    2,
    8,
    7
   ],
   [
    1,
    7,
    4,
    10,
    10,
    2,
    0,
    3,
    10,
    3
   ],
   [
    8,
    4,
    4,
    7,
    10,
    2,
    3,
    0,
    10,
    2
   ],
   [
    1,
    6,
    6,
    5,
    2,
    8,
    10,
    10,
    0,
    10
   ],
   [
    4,
    5,
    10,
    4,
    2,
    7,
    3,
    2,
    10,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Beacon Tower",
   "Sapphire Arena",
   "Evergreen Circle",
   "Mosaic Plaza",
   "Umbra Theater",
   "Quartz District",
   "Horizon Mall",
   "Rosewood Hall",
   "Riverstone Wharf"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Sapphire Arena",
     "Evergreen Circle",
     "Beacon Tower",
     "Umbra Theater",
     "Horizon Mall",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Rosewood Hall",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Umbra Theater",
     "Horizon Mall",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Beacon Tower",
     "Evergreen Circle",
     "Sapphire Arena",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 34,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Umbra Theater",
     "Mosaic Plaza",
     "Rosewood Hall",
     "Evergreen Circle",
     "Beacon Tower",
     "Horizon Mall",
     "Riverstone Wharf",
     "Sapphire Arena",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Umbra Theater",
     "Mosaic Plaza",
     "Rosewood Hall",
     "Evergreen Circle",
     "Beacon Tower",
     "Horizon Mall",
     "Riverstone Wharf",
     "Sapphire Arena",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Horizon Mall",
     "Quartz District",
     "Sapphire Arena",
     "Evergreen Circle",
     "Beacon Tower",
     "Umbra Theater",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Rosewood Hall",
     "Horizon Mall",
     "Beacon Tower",
     "Evergreen Circle",
     "Sapphire Arena",
     "Umbra Theater",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 1,
  "adj": [
   [
    0,
    6,
    3,
    9,
    9,
    1,
    4,
    1,
    1,
    10
   ],
   [
    6,
    0,
    3,
    3,
    8,
    10,
    3,
    9,
    1,
    10
   ],
   [
    3,
    3,
    0,
    1,
    9,
    8,
    9,
    1,
    9,
    9
   ],
   [
    9,
    3,
    1,
    0,
    7,
    5,
    5,
    5,
    6,
    7
   ],
   [
    9,
    8,
    9,
    7,
    0,
    5,
    2,
    1,
    7,
    4
   ],
   [
    1,
    10,
    8,
    5,
    5,
    0,
    7,
    5,
    1,
    7
   ],
   [
    4,
    3,
    9,
    5,
    2,
    7,
    0,
    1,
    10,
    5
   ],
   [
    1,
    9,
    1,
    5,
    1,
    5,
    1,
    0,
    3,
    5
   ],
   [
    1,
    1,
    9,
    6,
    7,
    1,
    10,
    3,
    0,
    8
   ],
   [
    10,
    10,
    9,
    7,
    4,
    7,
    5,
    5,
    8,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Northwind Tower",
   "Copper Clock Square",
   "Granite Plaza",
   "Flare Alley",
   "Duskwood Park",
   "Primrose Boulevard",
   "Evergreen Circle",
   "Maplewood Conservatory",
   "Ironbridge Crossing"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Duskwood Park",
     "Maplewood Conservatory",
     "Northwind Tower",
     "Copper Clock Square",
     "Granite Plaza",
     "Ironbridge Crossing",
     "Flare Alley",
     "Primrose Boulevard",
     "Evergreen Circle",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.03
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Maplewood Conservatory",
     "Northwind Tower",
     "Granite Plaza",
     "Copper Clock Square",
     "Evergreen Circle",
     "Primrose Boulevard",
     "Ironbridge Crossing",
     "Flare Alley",
     "Duskwood Park",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Duskwood Park",
     "Maplewood Conservatory",
     "Northwind Tower",
     "Copper Clock Square",
     "Granite Plaza",
     "Primrose Boulevard",
     "Evergreen Circle",
     "Flare Alley",
     "Ironbridge Crossing",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Duskwood Park",
     "Maplewood Conservatory",
     "Northwind Tower",
     "Copper Clock Square",
     "Granite Plaza",
     "Primrose Boulevard",
     "Evergreen Circle",
     "Flare Alley",
     "Ironbridge Crossing",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Copper Clock Square",
     "Granite Plaza",
     "Northwind Tower",
     "Maplewood Conservatory",
     "Duskwood Park",
     "Ironbridge Crossing",
     "Flare Alley",
     "Primrose Boulevard",
     "Evergreen Circle",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Ironbridge Crossing",
     "Flare Alley",
     "Evergreen Circle",
     "Copper Clock Square",
     "Granite Plaza",
     "Northwind Tower",
     "Maplewood Conservatory",
     "Duskwood Park",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 1.22
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 2,
  "adj": [
   [
    0,
    7,
    10,
    8,
    4,
    6,
    1,
    5,
    1,
    1
   ],
   [
    7,
    0,
    8,
    1,
    4,
    3,
    1,
    4,
    3,
    1
   ],
   [
    10,
    8,
    0,
    6,
    5,
    6,
    1,
    1,
    1,
    3
   ],
   [
    8,
    1,
    6,
    0,
    3,
    4,
    2,
    3,
    9,
    4
   ],
   [
    4,
    4,
    5,
    3,
    0,
    1,
    2,
    2,
    4,
    1
   ],
   [
    6,
    3,
    6,
    4,
    1,
    0,
    4,
    1,
    2,
    3
   ],
   [
    1,
    1,
    1,
    2,
    2,
    4,
    0,
    2,
    2,
    9
   ],
   [
    5,
    4,
    1,
    3,
    2,
    1,
    2,
    0,
    6,
    2
   ],
   [
    1,
    3,
    1,
    9,
    4,
    2,
    2,
    6,
    0,
    2
   ],
   [
    1,
    1,
    3,
    4,
    1,
    3,
    9,
    2,
    2,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Lighthouse Point",
   "Copper Clock Square",
   "Umbra Theater",
   "Westgate Station",
   "Union Square Market",
   "Ironbridge Crossing",
   "Rosewood Hall",
   "Dragon’s Gate",
   "Primrose Boulevard"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Ironbridge Crossing",
     "Umbra Theater",
     "Lighthouse Point",
     "Primrose Boulevard",
     "Westgate Station",
     "Union Square Market",
     "Rosewood Hall",
     "Copper Clock Square",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 11,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Dragon’s Gate",
     "Primrose Boulevard",
     "Westgate Station",
     "Union Square Market",
     "Rosewood Hall",
     "Copper Clock Square",
     "Ironbridge Crossing",
     "Umbra Theater",
     "Lighthouse Point",
     "Warehouse"
    ],
    "ans_distance": 18,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Ironbridge Crossing",
     "Lighthouse Point",
     "Umbra Theater",
     "Westgate Station",
     "Union Square Market",
     "Rosewood Hall",
     "Copper Clock Square",
     "Dragon’s Gate",
     "Primrose Boulevard",
     "Warehouse"
    ],
    "ans_distance": 13,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Ironbridge Crossing",
     "Lighthouse Point",
     "Umbra Theater",
     "Westgate Station",
     "Union Square Market",
     "Rosewood Hall",
     "Copper Clock Square",
     "Dragon’s Gate",
     "Primrose Boulevard",
     "Warehouse"
    ],
    "ans_distance": 13,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Dragon’s Gate",
     "Copper Clock Square",
     "Rosewood Hall",
     "Union Square Market",
     "Westgate Station",
     "Ironbridge Crossing",
     "Umbra Theater",
     "Lighthouse Point",
     "Primrose Boulevard",
     "Warehouse"
    ],
    "ans_distance": 12,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Lighthouse Point",
     "Umbra Theater",
     "Westgate Station",
     "Union Square Market",
     "Rosewood Hall",
     "Ironbridge Crossing",
     "Copper Clock Square",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 13,
    "cost_time": 1.26
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 3,
  "adj": [
   [
    0,
    9,
    8,
    7,
    4,
    3,
    8,
    6,
    7,
    3
   ],
   [
    9,
    0,
    2,
    3,
    9,
    6,
    10,
    1,
    1,
    9
   ],
   [
    8,
    2,
    0,
    4,
    9,
    4,
    1,
    8,
    1,
    7
   ],
   [
    7,
    3,
    4,
    0,
    5,
    7,
    10,
    3,
    6,
    9
   ],
   [
    4,
    9,
    9,
    5,
    0,
    6,
    2,
    4,
    8,
    8
   ],
   [
    3,
    6,
    4,
    7,
    6,
    0,
    3,
    3,
    6,
    5
   ],
   [
    8,
    10,
    1,
    10,
    2,
    3,
    0,
    5,
    8,
    3
   ],
   [
    6,
    1,
    8,
    3,
    4,
    3,
    5,
    0,
    8,
    8
   ],
   [
    7,
    1,
    1,
    6,
    8,
    6,
    8,
    8,
    0,
    3
   ],
   [
    3,
    9,
    7,
    9,
    8,
    5,
    3,
    8,
    3,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Riverstone Wharf",
   "Haven Docks",
   "Flint Forge Quarter",
   "Ivory Spire Cathedral",
   "Jasper Marina",
   "Pennywhistle Arcade",
   "Lunar Pier",
   "Sapphire Arena",
   "Temple Square"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Jasper Marina",
     "Lunar Pier",
     "Riverstone Wharf",
     "Flint Forge Quarter",
     "Ivory Spire Cathedral",
     "Pennywhistle Arcade",
     "Haven Docks",
     "Sapphire Arena",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Temple Square",
     "Pennywhistle Arcade",
     "Ivory Spire Cathedral",
     "Flint Forge Quarter",
     "Riverstone Wharf",
     "Lunar Pier",
     "Sapphire Arena",
     "Haven Docks",
     "Jasper Marina",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Jasper Marina",
     "Pennywhistle Arcade",
     "Haven Docks",
     "Sapphire Arena",
     "Riverstone Wharf",
     "Lunar Pier",
     "Flint Forge Quarter",
     "Ivory Spire Cathedral",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Jasper Marina",
     "Pennywhistle Arcade",
     "Haven Docks",
     "Sapphire Arena",
     "Riverstone Wharf",
     "Lunar Pier",
     "Flint Forge Quarter",
     "Ivory Spire Cathedral",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Ivory Spire Cathedral",
     "Pennywhistle Arcade",
     "Haven Docks",
     "Sapphire Arena",
     "Riverstone Wharf",
     "Flint Forge Quarter",
     "Lunar Pier",
     "Jasper Marina",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Temple Square",
     "Pennywhistle Arcade",
     "Jasper Marina",
     "Haven Docks",
     "Sapphire Arena",
     "Riverstone Wharf",
     "Flint Forge Quarter",
     "Lunar Pier",
     "Ivory Spire Cathedral",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 4,
  "adj": [
   [
    0,
    2,
    2,
    10,
    6,
    7,
    9,
    2,
    4,
    7
   ],
   [
    2,
    0,
    6,
    1,
    9,
    3,
    4,
    6,
    3,
    6
   ],
   [
    2,
    6,
    0,
    6,
    10,
    5,
    2,
    6,
    8,
    6
   ],
   [
    10,
    1,
    6,
    0,
    6,
    5,
    10,
    6,
    10,
    3
   ],
   [
    6,
    9,
    10,
    6,
    0,
    2,
    9,
    7,
    6,
    3
   ],
   [
    7,
    3,
    5,
    5,
    2,
    0,
    6,
    5,
    4,
    8
   ],
   [
    9,
    4,
    2,
    10,
    9,
    6,
    0,
    3,
    1,
    8
   ],
   [
    2,
    6,
    6,
    6,
    7,
    5,
    3,
    0,
    6,
    1
   ],
   [
    4,
    3,
    8,
    10,
    6,
    4,
    1,
    6,
    0,
    7
   ],
   [
    7,
    6,
    6,
    3,
    3,
    8,
    8,
    1,
    7,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Beacon Tower",
   "Velvet Corner",
   "Flare Alley",
   "Mosaic Plaza",
   "Amber Plaza",
   "Oakshade Library",
   "Jade Fountain",
   "Silvercrest Observatory",
   "Riverstone Wharf"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Velvet Corner",
     "Oakshade Library",
     "Silvercrest Observatory",
     "Beacon Tower",
     "Flare Alley",
     "Amber Plaza",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Jade Fountain",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Oakshade Library",
     "Velvet Corner",
     "Jade Fountain",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Amber Plaza",
     "Beacon Tower",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Beacon Tower",
     "Flare Alley",
     "Riverstone Wharf",
     "Jade Fountain",
     "Oakshade Library",
     "Silvercrest Observatory",
     "Amber Plaza",
     "Mosaic Plaza",
     "Velvet Corner",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Beacon Tower",
     "Flare Alley",
     "Riverstone Wharf",
     "Jade Fountain",
     "Oakshade Library",
     "Silvercrest Observatory",
     "Amber Plaza",
     "Mosaic Plaza",
     "Velvet Corner",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Mosaic Plaza",
     "Amber Plaza",
     "Beacon Tower",
     "Flare Alley",
     "Riverstone Wharf",
     "Jade Fountain",
     "Oakshade Library",
     "Velvet Corner",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Velvet Corner",
     "Amber Plaza",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Jade Fountain",
     "Oakshade Library",
     "Silvercrest Observatory",
     "Flare Alley",
     "Beacon Tower",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse, and each delivery point must be visited exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 5,
  "adj": [
   [
    0,
    2,
    6,
    2,
    3,
    6,
    10,
    7,
    10,
    7
   ],
   [
    2,
    0,
    2,
    1,
    3,
    5,
    5,
    3,
    7,
    5
   ],
   [
    6,
    2,
    0,
    2,
    6,
    9,
    9,
    7,
    9,
    2
   ],
   [
    2,
    1,
    2,
    0,
    9,
    9,
    5,
    7,
    9,
    3
   ],
   [
    3,
    3,
    6,
    9,
    0,
    1,
    4,
    2,
    10,
    9
   ],
   [
    6,
    5,
    9,
    9,
    1,
    0,
    4,
    8,
    2,
    8
   ],
   [
    10,
    5,
    9,
    5,
    4,
    4,
    0,
    8,
    7,
    5
   ],
   [
    7,
    3,
    7,
    7,
    2,
    8,
    8,
    0,
    6,
    8
   ],
   [
    10,
    7,
    9,
    9,
    10,
    2,
    7,
    6,
    0,
    1
   ],
   [
    7,
    5,
    2,
    3,
    9,
    8,
    5,
    8,
    1,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Granite Plaza",
   "Lunar Pier",
   "Oakshade Library",
   "Ironbridge Crossing",
   "Northwind Tower",
   "Dragon’s Gate",
   "Jasper Marina",
   "Ivory Spire Cathedral",
   "Westgate Station"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Jasper Marina",
     "Ironbridge Crossing",
     "Dragon’s Gate",
     "Northwind Tower",
     "Ivory Spire Cathedral",
     "Westgate Station",
     "Lunar Pier",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Lunar Pier",
     "Westgate Station",
     "Ivory Spire Cathedral",
     "Northwind Tower",
     "Ironbridge Crossing",
     "Jasper Marina",
     "Dragon’s Gate",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Oakshade Library",
     "Lunar Pier",
     "Westgate Station",
     "Ivory Spire Cathedral",
     "Northwind Tower",
     "Ironbridge Crossing",
     "Jasper Marina",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 31,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Oakshade Library",
     "Lunar Pier",
     "Westgate Station",
     "Ivory Spire Cathedral",
     "Northwind Tower",
     "Ironbridge Crossing",
     "Jasper Marina",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 31,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Westgate Station",
     "Ivory Spire Cathedral",
     "Northwind Tower",
     "Dragon’s Gate",
     "Ironbridge Crossing",
     "Jasper Marina",
     "Granite Plaza",
     "Lunar Pier",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Ironbridge Crossing",
     "Jasper Marina",
     "Ivory Spire Cathedral",
     "Northwind Tower",
     "Dragon’s Gate",
     "Lunar Pier",
     "Westgate Station",
     "Granite Plaza",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 6,
  "adj": [
   [
    0,
    7,
    8,
    5,
    9,
    4,
    5,
    8,
    6,
    2
   ],
   [
    7,
    0,
    5,
    6,
    9,
    6,
    9,
    3,
    8,
    8
   ],
   [
    8,
    5,
    0,
    8,
    4,
    4,
    7,
    10,
    3,
    10
   ],
   [
    5,
    6,
    8,
    0,
    3,
    4,
    4,
    6,
    1,
    3
   ],
   [
    9,
    9,
    4,
    3,
    0,
    7,
    2,
    9,
    1,
    4
   ],
   [
    4,
    6,
    4,
    4,
    7,
    0,
    7,
    3,
    8,
    6
   ],
   [
    5,
    9,
    7,
    4,
    2,
    7,
    0,
    3,
    5,
    6
   ],
   [
    8,
    3,
    10,
    6,
    9,
    3,
    3,
    0,
    6,
    8
   ],
   [
    6,
    8,
    3,
    1,
    1,
    8,
    5,
    6,
    0,
    7
   ],
   [
    2,
    8,
    10,
    3,
    4,
    6,
    6,
    8,
    7,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Duskwood Park",
   "Yarrow Plaza",
   "Azure Gardens",
   "Umbra Theater",
   "Willowshade Pavilion",
   "Copper Clock Square",
   "Ironbridge Crossing",
   "Pennywhistle Arcade",
   "Rosewood Hall"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Willowshade Pavilion",
     "Yarrow Plaza",
     "Duskwood Park",
     "Ironbridge Crossing",
     "Copper Clock Square",
     "Umbra Theater",
     "Pennywhistle Arcade",
     "Azure Gardens",
     "Rosewood Hall",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Willowshade Pavilion",
     "Ironbridge Crossing",
     "Duskwood Park",
     "Copper Clock Square",
     "Umbra Theater",
     "Pennywhistle Arcade",
     "Yarrow Plaza",
     "Azure Gardens",
     "Rosewood Hall",
     "Warehouse"
    ],
    "ans_distance": 38,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Azure Gardens",
     "Pennywhistle Arcade",
     "Umbra Theater",
     "Copper Clock Square",
     "Ironbridge Crossing",
     "Duskwood Park",
     "Yarrow Plaza",
     "Willowshade Pavilion",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Azure Gardens",
     "Pennywhistle Arcade",
     "Umbra Theater",
     "Copper Clock Square",
     "Ironbridge Crossing",
     "Duskwood Park",
     "Yarrow Plaza",
     "Willowshade Pavilion",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Azure Gardens",
     "Umbra Theater",
     "Copper Clock Square",
     "Ironbridge Crossing",
     "Duskwood Park",
     "Pennywhistle Arcade",
     "Yarrow Plaza",
     "Willowshade Pavilion",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Azure Gardens",
     "Pennywhistle Arcade",
     "Umbra Theater",
     "Yarrow Plaza",
     "Willowshade Pavilion",
     "Copper Clock Square",
     "Ironbridge Crossing",
     "Duskwood Park",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 7,
  "adj": [
   [
    0,
    2,
    4,
    1,
    7,
    7,
    3,
    1,
    1,
    10
   ],
   [
    2,
    0,
    9,
    1,
    1,
    5,
    2,
    6,
    4,
    8
   ],
   [
    4,
    9,
    0,
    3,
    10,
    2,
    10,
    9,
    5,
    9
   ],
   [
    1,
    1,
    3,
    0,
    3,
    9,
    2,
    2,
    9,
    1
   ],
   [
    7,
    1,
    10,
    3,
    0,
    2,
    5,
    5,
    10,
    10
   ],
   [
    7,
    5,
    2,
    9,
    2,
    0,
    10,
    1,
    1,
    9
   ],
   [
    3,
    2,
    10,
    2,
    5,
    10,
    0,
    4,
    10,
    9
   ],
   [
    1,
    6,
    9,
    2,
    5,
    1,
    4,
    0,
    6,
    8
   ],
   [
    1,
    4,
    5,
    9,
    10,
    1,
    10,
    6,
    0,
    1
   ],
   [
    10,
    8,
    9,
    1,
    10,
    9,
    9,
    8,
    1,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Knight’s Market",
   "Moonlit Promenade",
   "Opal Theater",
   "Cobalt Market",
   "Beacon Tower",
   "Zenith Arena",
   "Brass Lantern Tavern",
   "Evergreen Circle",
   "Amber Plaza"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Brass Lantern Tavern",
     "Zenith Arena",
     "Knight’s Market",
     "Cobalt Market",
     "Beacon Tower",
     "Moonlit Promenade",
     "Opal Theater",
     "Amber Plaza",
     "Evergreen Circle",
     "Warehouse"
    ],
    "ans_distance": 18,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Evergreen Circle",
     "Amber Plaza",
     "Opal Theater",
     "Moonlit Promenade",
     "Beacon Tower",
     "Brass Lantern Tavern",
     "Zenith Arena",
     "Knight’s Market",
     "Cobalt Market",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Knight’s Market",
     "Cobalt Market",
     "Beacon Tower",
     "Brass Lantern Tavern",
     "Zenith Arena",
     "Amber Plaza",
     "Evergreen Circle",
     "Moonlit Promenade",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Knight’s Market",
     "Cobalt Market",
     "Beacon Tower",
     "Brass Lantern Tavern",
     "Zenith Arena",
     "Amber Plaza",
     "Evergreen Circle",
     "Moonlit Promenade",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Zenith Arena",
     "Knight’s Market",
     "Cobalt Market",
     "Beacon Tower",
     "Evergreen Circle",
     "Amber Plaza",
     "Opal Theater",
     "Moonlit Promenade",
     "Brass Lantern Tavern",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Evergreen Circle",
     "Amber Plaza",
     "Opal Theater",
     "Moonlit Promenade",
     "Beacon Tower",
     "Brass Lantern Tavern",
     "Cobalt Market",
     "Knight’s Market",
     "Zenith Arena",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 8,
  "adj": [
   [
    0,
    5,
    7,
    9,
    9,
    4,
    6,
    7,
    6,
    10
   ],
   [
    5,
    0,
    2,
    5,
    7,
    9,
    3,
    5,
    3,
    5
   ],
   [
    7,
    2,
    0,
    1,
    8,
    4,
    9,
    2,
    6,
    10
   ],
   [
    9,
    5,
    1,
    0,
    10,
    1,
    3,
    9,
    1,
    6
   ],
   [
    9,
    7,
    8,
    10,
    0,
    3,
    3,
    4,
    9,
    3
   ],
   [
    4,
    9,
    4,
    1,
    3,
    0,
    4,
    5,
    3,
    4
   ],
   [
    6,
    3,
    9,
    3,
    3,
    4,
    0,
    4,
    4,
    2
   ],
   [
    7,
    5,
    2,
    9,
    4,
    5,
    4,
    0,
    4,
    8
   ],
   [
    6,
    3,
    6,
    1,
    9,
    3,
    4,
    4,
    0,
    6
   ],
   [
    10,
    5,
    10,
    6,
    3,
    4,
    2,
    8,
    6,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Quartz District",
   "Sapphire Arena",
   "Nimbus Plaza",
   "Temple Square",
   "Jasper Marina",
   "Northwind Tower",
   "Primrose Boulevard",
   "Flint Forge Quarter",
   "Horizon Mall"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Sapphire Arena",
     "Primrose Boulevard",
     "Temple Square",
     "Horizon Mall",
     "Northwind Tower",
     "Flint Forge Quarter",
     "Nimbus Plaza",
     "Jasper Marina",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Jasper Marina",
     "Temple Square",
     "Horizon Mall",
     "Northwind Tower",
     "Quartz District",
     "Sapphire Arena",
     "Primrose Boulevard",
     "Nimbus Plaza",
     "Flint Forge Quarter",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Jasper Marina",
     "Nimbus Plaza",
     "Sapphire Arena",
     "Quartz District",
     "Northwind Tower",
     "Horizon Mall",
     "Temple Square",
     "Primrose Boulevard",
     "Flint Forge Quarter",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Jasper Marina",
     "Nimbus Plaza",
     "Sapphire Arena",
     "Quartz District",
     "Northwind Tower",
     "Horizon Mall",
     "Temple Square",
     "Primrose Boulevard",
     "Flint Forge Quarter",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Flint Forge Quarter",
     "Primrose Boulevard",
     "Sapphire Arena",
     "Nimbus Plaza",
     "Jasper Marina",
     "Temple Square",
     "Horizon Mall",
     "Northwind Tower",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Primrose Boulevard",
     "Sapphire Arena",
     "Nimbus Plaza",
     "Flint Forge Quarter",
     "Temple Square",
     "Horizon Mall",
     "Northwind Tower",
     "Jasper Marina",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 1.22
   }
  },
  "response": "{\n    \"objective\": \"Find the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 9,
  "adj": [
   [
    0,
    4,
    8,
    1,
    1,
    7,
    5,
    1,
    10,
    2
   ],
   [
    4,
    0,
    9,
    4,
    1,
    4,
    1,
    2,
    5,
    7
   ],
   [
    8,
    9,
    0,
    10,
    4,
    8,
    6,
    7,
    2,
    4
   ],
   [
    1,
    4,
    10,
    0,
    6,
    6,
    5,
    6,
    10,
    5
   ],
   [
    1,
    1,
    4,
    6,
    0,
    4,
    4,
    1,
    3,
    9
   ],
   [
    7,
    4,
    8,
    6,
    4,
    0,
    1,
    10,
    4,
    4
   ],
   [
    5,
    1,
    6,
    5,
    4,
    1,
    0,
    1,
    3,
    7
   ],
   [
    1,
    2,
    7,
    6,
    1,
    10,
    1,
    0,
    7,
    1
   ],
   [
    10,
    5,
    2,
    10,
    3,
    4,
    3,
    7,
    0,
    8
   ],
   [
    2,
    7,
    4,
    5,
    9,
    4,
    7,
    1,
    8,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Opal Theater",
   "Maplewood Conservatory",
   "Brass Lantern Tavern",
   "King’s Row",
   "Silvercrest Observatory",
   "Knight’s Market",
   "Lighthouse Point",
   "Moonlit Promenade",
   "Beacon Tower"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Brass Lantern Tavern",
     "Opal Theater",
     "Knight’s Market",
     "Silvercrest Observatory",
     "Moonlit Promenade",
     "Maplewood Conservatory",
     "Beacon Tower",
     "Lighthouse Point",
     "King’s Row",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Lighthouse Point",
     "Beacon Tower",
     "Silvercrest Observatory",
     "Knight’s Market",
     "Opal Theater",
     "King’s Row",
     "Moonlit Promenade",
     "Maplewood Conservatory",
     "Brass Lantern Tavern",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Brass Lantern Tavern",
     "Opal Theater",
     "King’s Row",
     "Lighthouse Point",
     "Knight’s Market",
     "Silvercrest Observatory",
     "Moonlit Promenade",
     "Maplewood Conservatory",
     "Beacon Tower",
     "Warehouse"
    ],
    "ans_distance": 21,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Brass Lantern Tavern",
     "Opal Theater",
     "King’s Row",
     "Lighthouse Point",
     "Knight’s Market",
     "Silvercrest Observatory",
     "Moonlit Promenade",
     "Maplewood Conservatory",
     "Beacon Tower",
     "Warehouse"
    ],
    "ans_distance": 21,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Brass Lantern Tavern",
     "Silvercrest Observatory",
     "Knight’s Market",
     "Opal Theater",
     "King’s Row",
     "Moonlit Promenade",
     "Maplewood Conservatory",
     "Beacon Tower",
     "Lighthouse Point",
     "Warehouse"
    ],
    "ans_distance": 21,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Lighthouse Point",
     "Knight’s Market",
     "Opal Theater",
     "King’s Row",
     "Moonlit Promenade",
     "Maplewood Conservatory",
     "Beacon Tower",
     "Silvercrest Observatory",
     "Brass Lantern Tavern",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Determine the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 10,
  "adj": [
   [
    0,
    9,
    7,
    5,
    6,
    7,
    8,
    9,
    10,
    9
   ],
   [
    9,
    0,
    8,
    8,
    10,
    3,
    7,
    2,
    2,
    5
   ],
   [
    7,
    8,
    0,
    10,
    10,
    7,
    8,
    5,
    5,
    8
   ],
   [
    5,
    8,
    10,
    0,
    7,
    8,
    9,
    9,
    9,
    6
   ],
   [
    6,
    10,
    10,
    7,
    0,
    8,
    6,
    6,
    10,
    2
   ],
   [
    7,
    3,
    7,
    8,
    8,
    0,
    8,
    9,
    10,
    10
   ],
   [
    8,
    7,
    8,
    9,
    6,
    8,
    0,
    7,
    1,
    5
   ],
   [
    9,
    2,
    5,
    9,
    6,
    9,
    7,
    0,
    8,
    3
   ],
   [
    10,
    2,
    5,
    9,
    10,
    10,
    1,
    8,
    0,
    10
   ],
   [
    9,
    5,
    8,
    6,
    2,
    10,
    5,
    3,
    10,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Nimbus Plaza",
   "Jade Fountain",
   "Opal Theater",
   "Quartz District",
   "Yarrow Plaza",
   "Rosewood Hall",
   "Jasper Marina",
   "Maplewood Conservatory",
   "Haven Docks"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Jade Fountain",
     "Jasper Marina",
     "Haven Docks",
     "Quartz District",
     "Rosewood Hall",
     "Maplewood Conservatory",
     "Nimbus Plaza",
     "Yarrow Plaza",
     "Opal Theater",
     "Warehouse"
    ],
    "ans_distance": 42,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Haven Docks",
     "Jasper Marina",
     "Jade Fountain",
     "Nimbus Plaza",
     "Yarrow Plaza",
     "Maplewood Conservatory",
     "Rosewood Hall",
     "Opal Theater",
     "Warehouse"
    ],
    "ans_distance": 52,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Haven Docks",
     "Quartz District",
     "Rosewood Hall",
     "Maplewood Conservatory",
     "Nimbus Plaza",
     "Jasper Marina",
     "Jade Fountain",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 43,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Haven Docks",
     "Quartz District",
     "Rosewood Hall",
     "Maplewood Conservatory",
     "Nimbus Plaza",
     "Jasper Marina",
     "Jade Fountain",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 43,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Yarrow Plaza",
     "Nimbus Plaza",
     "Jasper Marina",
     "Haven Docks",
     "Quartz District",
     "Rosewood Hall",
     "Maplewood Conservatory",
     "Jade Fountain",
     "Warehouse"
    ],
    "ans_distance": 42,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Jade Fountain",
     "Haven Docks",
     "Jasper Marina",
     "Quartz District",
     "Rosewood Hall",
     "Maplewood Conservatory",
     "Nimbus Plaza",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 51,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 11,
  "adj": [
   [
    0,
    7,
    8,
    7,
    8,
    2,
    6,
    2,
    10,
    6
   ],
   [
    7,
    0,
    3,
    8,
    2,
    9,
    6,
    5,
    6,
    5
   ],
   [
    8,
    3,
    0,
    9,
    6,
    5,
    5,
    4,
    10,
    4
   ],
   [
    7,
    8,
    9,
    0,
    10,
    6,
    7,
    10,
    1,
    10
   ],
   [
    8,
    2,
    6,
    10,
    0,
    7,
    6,
    3,
    4,
    6
   ],
   [
    2,
    9,
    5,
    6,
    7,
    0,
    8,
    4,
    10,
    8
   ],
   [
    6,
    6,
    5,
    7,
    6,
    8,
    0,
    7,
    6,
    10
   ],
   [
    2,
    5,
    4,
    10,
    3,
    4,
    7,
    0,
    10,
    4
   ],
   [
    10,
    6,
    10,
    1,
    4,
    10,
    6,
    10,
    0,
    8
   ],
   [
    6,
    5,
    4,
    10,
    6,
    8,
    10,
    4,
    8,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Quarry Point",
   "Westgate Station",
   "Horizon Mall",
   "Copper Clock Square",
   "Silvercrest Observatory",
   "Amber Plaza",
   "Ironbridge Crossing",
   "Quartz District",
   "Jasper Marina"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Horizon Mall",
     "Quartz District",
     "Copper Clock Square",
     "Quarry Point",
     "Amber Plaza",
     "Westgate Station",
     "Jasper Marina",
     "Ironbridge Crossing",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Ironbridge Crossing",
     "Copper Clock Square",
     "Amber Plaza",
     "Westgate Station",
     "Jasper Marina",
     "Quarry Point",
     "Quartz District",
     "Horizon Mall",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Ironbridge Crossing",
     "Copper Clock Square",
     "Quarry Point",
     "Westgate Station",
     "Jasper Marina",
     "Quartz District",
     "Horizon Mall",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Ironbridge Crossing",
     "Copper Clock Square",
     "Quarry Point",
     "Westgate Station",
     "Jasper Marina",
     "Quartz District",
     "Horizon Mall",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Jasper Marina",
     "Westgate Station",
     "Quarry Point",
     "Amber Plaza",
     "Horizon Mall",
     "Quartz District",
     "Copper Clock Square",
     "Ironbridge Crossing",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Horizon Mall",
     "Quartz District",
     "Amber Plaza",
     "Copper Clock Square",
     "Jasper Marina",
     "Westgate Station",
     "Ironbridge Crossing",
     "Quarry Point",
     "Warehouse"
    ],
    "ans_distance": 47,
    "cost_time": 1.22
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 12,
  "adj": [
   [
    0,
    3,
    1,
    10,
    1,
    1,
    4,
    3,
    5,
    5
   ],
   [
    3,
    0,
    1,
    7,
    2,
    10,
    10,
    10,
    5,
    6
   ],
   [
    1,
    1,
    0,
    10,
    6,
    2,
    8,
    8,
    2,
    5
   ],
   [
    10,
    7,
    10,
    0,
    2,
    5,
    10,
    10,
    2,
    8
   ],
   [
    1,
    2,
    6,
    2,
    0,
    6,
    2,
    9,
    3,
    7
   ],
   [
    1,
    10,
    2,
    5,
    6,
    0,
    8,
    4,
    4,
    4
   ],
   [
    4,
    10,
    8,
    10,
    2,
    8,
    0,
    3,
    8,
    9
   ],
   [
    3,
    10,
    8,
    10,
    9,
    4,
    3,
    0,
    9,
    9
   ],
   [
    5,
    5,
    2,
    2,
    3,
    4,
    8,
    9,
    0,
    5
   ],
   [
    5,
    6,
    5,
    8,
    7,
    4,
    9,
    9,
    5,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Jasper Marina",
   "Copper Clock Square",
   "Lunar Pier",
   "Haven Docks",
   "Evergreen Circle",
   "Ironbridge Crossing",
   "Cobalt Market",
   "Gilded Archway",
   "Yarrow Plaza"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Evergreen Circle",
     "Yarrow Plaza",
     "Jasper Marina",
     "Copper Clock Square",
     "Gilded Archway",
     "Lunar Pier",
     "Haven Docks",
     "Ironbridge Crossing",
     "Cobalt Market",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Cobalt Market",
     "Ironbridge Crossing",
     "Haven Docks",
     "Lunar Pier",
     "Evergreen Circle",
     "Yarrow Plaza",
     "Gilded Archway",
     "Copper Clock Square",
     "Jasper Marina",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Copper Clock Square",
     "Jasper Marina",
     "Haven Docks",
     "Lunar Pier",
     "Gilded Archway",
     "Evergreen Circle",
     "Cobalt Market",
     "Ironbridge Crossing",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Copper Clock Square",
     "Jasper Marina",
     "Haven Docks",
     "Lunar Pier",
     "Gilded Archway",
     "Evergreen Circle",
     "Cobalt Market",
     "Ironbridge Crossing",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Cobalt Market",
     "Ironbridge Crossing",
     "Haven Docks",
     "Lunar Pier",
     "Gilded Archway",
     "Copper Clock Square",
     "Jasper Marina",
     "Yarrow Plaza",
     "Evergreen Circle",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Cobalt Market",
     "Ironbridge Crossing",
     "Evergreen Circle",
     "Copper Clock Square",
     "Jasper Marina",
     "Gilded Archway",
     "Lunar Pier",
     "Yarrow Plaza",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 13,
  "adj": [
   [
    0,
    8,
    8,
    7,
    5,
    10,
    3,
    10,
    4,
    9
   ],
   [
    8,
    0,
    2,
    1,
    7,
    4,
    7,
    8,
    5,
    10
   ],
   [
    8,
    2,
    0,
    8,
    10,
    6,
    9,
    10,
    5,
    10
   ],
   [
    7,
    1,
    8,
    0,
    10,
    5,
    9,
    3,
    5,
    2
   ],
   [
    5,
    7,
    10,
    10,
    0,
    8,
    10,
    5,
    10,
    10
   ],
   [
    10,
    4,
    6,
    5,
    8,
    0,
    6,
    10,
    4,
    8
   ],
   [
    3,
    7,
    9,
    9,
    10,
    6,
    0,
    5,
    10,
    8
   ],
   [
    10,
    8,
    10,
    3,
    5,
    10,
    5,
    0,
    10,
    7
   ],
   [
    4,
    5,
    5,
    5,
    10,
    4,
    10,
    10,
    0,
    8
   ],
   [
    9,
    10,
    10,
    2,
    10,
    8,
    8,
    7,
    8,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Lunar Pier",
   "Skyline Gardens",
   "Maplewood Conservatory",
   "Yarrow Plaza",
   "Rosewood Hall",
   "Silvercrest Observatory",
   "Evergreen Circle",
   "Horizon Mall",
   "Union Square Market"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Evergreen Circle",
     "Union Square Market",
     "Maplewood Conservatory",
     "Lunar Pier",
     "Skyline Gardens",
     "Horizon Mall",
     "Rosewood Hall",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Evergreen Circle",
     "Maplewood Conservatory",
     "Union Square Market",
     "Lunar Pier",
     "Skyline Gardens",
     "Rosewood Hall",
     "Horizon Mall",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 50,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Evergreen Circle",
     "Maplewood Conservatory",
     "Lunar Pier",
     "Skyline Gardens",
     "Horizon Mall",
     "Rosewood Hall",
     "Yarrow Plaza",
     "Union Square Market",
     "Warehouse"
    ],
    "ans_distance": 50,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Evergreen Circle",
     "Maplewood Conservatory",
     "Lunar Pier",
     "Skyline Gardens",
     "Horizon Mall",
     "Rosewood Hall",
     "Yarrow Plaza",
     "Union Square Market",
     "Warehouse"
    ],
    "ans_distance": 50,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Evergreen Circle",
     "Union Square Market",
     "Maplewood Conservatory",
     "Lunar Pier",
     "Skyline Gardens",
     "Horizon Mall",
     "Rosewood Hall",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Horizon Mall",
     "Rosewood Hall",
     "Yarrow Plaza",
     "Evergreen Circle",
     "Silvercrest Observatory",
     "Union Square Market",
     "Skyline Gardens",
     "Lunar Pier",
     "Maplewood Conservatory",
     "Warehouse"
    ],
    "ans_distance": 54,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 14,
  "adj": [
   [
    0,
    2,
    8,
    5,
    7,
    10,
    1,
    4,
    1,
    8
   ],
   [
    2,
    0,
    6,
    1,
    7,
    1,
    3,
    9,
    7,
    8
   ],
   [
    8,
    6,
    0,
    5,
    3,
    6,
    8,
    7,
    7,
    3
   ],
   [
    5,
    1,
    5,
    0,
    4,
    2,
    2,
    3,
    4,
    1
   ],
   [
    7,
    7,
    3,
    4,
    0,
    6,
    10,
    1,
    8,
    6
   ],
   [
    10,
    1,
    6,
    2,
    6,
    0,
    3,
    5,
    5,
    10
   ],
   [
    1,
    3,
    8,
    2,
    10,
    3,
    0,
    3,
    8,
    4
   ],
   [
    4,
    9,
    7,
    3,
    1,
    5,
    3,
    0,
    7,
    7
   ],
   [
    1,
    7,
    7,
    4,
    8,
    5,
    8,
    7,
    0,
    6
   ],
   [
    8,
    8,
    3,
    1,
    6,
    10,
    4,
    7,
    6,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Beacon Tower",
   "Amber Plaza",
   "Rosewood Hall",
   "Lunar Pier",
   "Willowshade Pavilion",
   "Zenith Arena",
   "Temple Square",
   "Flare Alley",
   "Shadowbridge Arcade"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Zenith Arena",
     "Temple Square",
     "Lunar Pier",
     "Amber Plaza",
     "Shadowbridge Arcade",
     "Rosewood Hall",
     "Beacon Tower",
     "Willowshade Pavilion",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Flare Alley",
     "Beacon Tower",
     "Willowshade Pavilion",
     "Rosewood Hall",
     "Shadowbridge Arcade",
     "Amber Plaza",
     "Lunar Pier",
     "Temple Square",
     "Zenith Arena",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Zenith Arena",
     "Rosewood Hall",
     "Beacon Tower",
     "Willowshade Pavilion",
     "Temple Square",
     "Lunar Pier",
     "Amber Plaza",
     "Shadowbridge Arcade",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Zenith Arena",
     "Rosewood Hall",
     "Beacon Tower",
     "Willowshade Pavilion",
     "Temple Square",
     "Lunar Pier",
     "Amber Plaza",
     "Shadowbridge Arcade",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Zenith Arena",
     "Temple Square",
     "Lunar Pier",
     "Amber Plaza",
     "Willowshade Pavilion",
     "Beacon Tower",
     "Rosewood Hall",
     "Shadowbridge Arcade",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Beacon Tower",
     "Willowshade Pavilion",
     "Zenith Arena",
     "Shadowbridge Arcade",
     "Amber Plaza",
     "Lunar Pier",
     "Temple Square",
     "Rosewood Hall",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 15,
  "adj": [
   [
    0,
    2,
    2,
    8,
    2,
    8,
    1,
    9,
    8,
    10
   ],
   [
    2,
    0,
    2,
    7,
    9,
    8,
    8,
    9,
    2,
    7
   ],
   [
    2,
    2,
    0,
    4,
    9,
    1,
    9,
    4,
    2,
    10
   ],
   [
    8,
    7,
    4,
    0,
    10,
    1,
    5,
    9,
    2,
    10
   ],
   [
    2,
    9,
    9,
    10,
    0,
    6,
    10,
    2,
    10,
    9
   ],
   [
    8,
    8,
    1,
    1,
    6,
    0,
    1,
    6,
    8,
    6
   ],
   [
    1,
    8,
    9,
    5,
    10,
    1,
    0,
    2,
    6,
    3
   ],
   [
    9,
    9,
    4,
    9,
    2,
    6,
    2,
    0,
    4,
    4
   ],
   [
    8,
    2,
    2,
    2,
    10,
    8,
    6,
    4,
    0,
    7
   ],
   [
    10,
    7,
    10,
    10,
    9,
    6,
    3,
    4,
    7,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Flint Forge Quarter",
   "Riverstone Wharf",
   "Haven Docks",
   "Yarrow Plaza",
   "Quarry Point",
   "Gilded Archway",
   "Shadowbridge Arcade",
   "Echo Station",
   "Lighthouse Point"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Flint Forge Quarter",
     "Riverstone Wharf",
     "Echo Station",
     "Haven Docks",
     "Quarry Point",
     "Gilded Archway",
     "Lighthouse Point",
     "Shadowbridge Arcade",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 21,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Shadowbridge Arcade",
     "Lighthouse Point",
     "Gilded Archway",
     "Quarry Point",
     "Haven Docks",
     "Riverstone Wharf",
     "Echo Station",
     "Flint Forge Quarter",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.02
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "Quarry Point",
     "Riverstone Wharf",
     "Flint Forge Quarter",
     "Echo Station",
     "Haven Docks",
     "Shadowbridge Arcade",
     "Yarrow Plaza",
     "Lighthouse Point",
     "Warehouse"
    ],
    "ans_distance": 39,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "Quarry Point",
     "Riverstone Wharf",
     "Flint Forge Quarter",
     "Echo Station",
     "Haven Docks",
     "Shadowbridge Arcade",
     "Yarrow Plaza",
     "Lighthouse Point",
     "Warehouse"
    ],
    "ans_distance": 39,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Riverstone Wharf",
     "Flint Forge Quarter",
     "Echo Station",
     "Haven Docks",
     "Quarry Point",
     "Gilded Archway",
     "Lighthouse Point",
     "Shadowbridge Arcade",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 21,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Flint Forge Quarter",
     "Echo Station",
     "Haven Docks",
     "Lighthouse Point",
     "Gilded Archway",
     "Quarry Point",
     "Riverstone Wharf",
     "Shadowbridge Arcade",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled during the delivery route.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 16,
  "adj": [
   [
    0,
    9,
    10,
    5,
    8,
    3,
    6,
    7,
    5,
    6
   ],
   [
    9,
    0,
    4,
    10,
    3,
    9,
    10,
    9,
    7,
    4
   ],
   [
    10,
    4,
    0,
    4,
    1,
    7,
    6,
    3,
    1,
    2
   ],
   [
    5,
    10,
    4,
    0,
    9,
    1,
    10,
    7,
    8,
    1
   ],
   [
    8,
    3,
    1,
    9,
    0,
    2,
    4,
    2,
    9,
    8
   ],
   [
    3,
    9,
    7,
    1,
    2,
    0,
    6,
    2,
    3,
    4
   ],
   [
    6,
    10,
    6,
    10,
    4,
    6,
    0,
    10,
    4,
    2
   ],
   [
    7,
    9,
    3,
    7,
    2,
    2,
    10,
    0,
    8,
    1
   ],
   [
    5,
    7,
    1,
    8,
    9,
    3,
    4,
    8,
    0,
    1
   ],
   [
    6,
    4,
    2,
    1,
    8,
    4,
    2,
    1,
    1,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Yarrow Plaza",
   "Willowshade Pavilion",
   "Silvercrest Observatory",
   "King’s Row",
   "Sapphire Arena",
   "Beacon Tower",
   "Westgate Station",
   "Nimbus Plaza",
   "Evergreen Circle"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Silvercrest Observatory",
     "Evergreen Circle",
     "Westgate Station",
     "King’s Row",
     "Yarrow Plaza",
     "Willowshade Pavilion",
     "Nimbus Plaza",
     "Beacon Tower",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Beacon Tower",
     "Evergreen Circle",
     "Nimbus Plaza",
     "Willowshade Pavilion",
     "King’s Row",
     "Yarrow Plaza",
     "Westgate Station",
     "Silvercrest Observatory",
     "Sapphire Arena",
     "Warehouse"
    ],
    "ans_distance": 34,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Silvercrest Observatory",
     "Evergreen Circle",
     "Westgate Station",
     "King’s Row",
     "Willowshade Pavilion",
     "Nimbus Plaza",
     "Beacon Tower",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Silvercrest Observatory",
     "Evergreen Circle",
     "Westgate Station",
     "King’s Row",
     "Willowshade Pavilion",
     "Nimbus Plaza",
     "Beacon Tower",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Beacon Tower",
     "Nimbus Plaza",
     "Willowshade Pavilion",
     "King’s Row",
     "Yarrow Plaza",
     "Evergreen Circle",
     "Westgate Station",
     "Sapphire Arena",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Beacon Tower",
     "King’s Row",
     "Yarrow Plaza",
     "Evergreen Circle",
     "Westgate Station",
     "Willowshade Pavilion",
     "Silvercrest Observatory",
     "Sapphire Arena",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 34,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 17,
  "adj": [
   [
    0,
    6,
    2,
    9,
    4,
    2,
    8,
    5,
    9,
    8
   ],
   [
    6,
    0,
    7,
    9,
    5,
    6,
    10,
    4,
    6,
    4
   ],
   [
    2,
    7,
    0,
    8,
    9,
    6,
    5,
    1,
    3,
    3
   ],
   [
    9,
    9,
    8,
    0,
    10,
    10,
    10,
    4,
    2,
    10
   ],
   [
    4,
    5,
    9,
    10,
    0,
    9,
    10,
    2,
    1,
    4
   ],
   [
    2,
    6,
    6,
    10,
    9,
    0,
    10,
    4,
    6,
    4
   ],
   [
    8,
    10,
    5,
    10,
    10,
    10,
    0,
    10,
    9,
    8
   ],
   [
    5,
    4,
    1,
    4,
    2,
    4,
    10,
    0,
    9,
    5
   ],
   [
    9,
    6,
    3,
    2,
    1,
    6,
    9,
    9,
    0,
    1
   ],
   [
    8,
    4,
    3,
    10,
    4,
    4,
    8,
    5,
    1,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Silvercrest Observatory",
   "Knight’s Market",
   "Jasper Marina",
   "Flint Forge Quarter",
   "Haven Docks",
   "Shadowbridge Arcade",
   "Sapphire Arena",
   "Maplewood Conservatory",
   "Moonlit Promenade"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Knight’s Market",
     "Shadowbridge Arcade",
     "Jasper Marina",
     "Maplewood Conservatory",
     "Flint Forge Quarter",
     "Sapphire Arena",
     "Silvercrest Observatory",
     "Moonlit Promenade",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Haven Docks",
     "Sapphire Arena",
     "Flint Forge Quarter",
     "Maplewood Conservatory",
     "Jasper Marina",
     "Moonlit Promenade",
     "Silvercrest Observatory",
     "Knight’s Market",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 45,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Knight’s Market",
     "Sapphire Arena",
     "Flint Forge Quarter",
     "Maplewood Conservatory",
     "Moonlit Promenade",
     "Silvercrest Observatory",
     "Haven Docks",
     "Jasper Marina",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 45,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Knight’s Market",
     "Sapphire Arena",
     "Flint Forge Quarter",
     "Maplewood Conservatory",
     "Moonlit Promenade",
     "Silvercrest Observatory",
     "Haven Docks",
     "Jasper Marina",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 45,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Knight’s Market",
     "Shadowbridge Arcade",
     "Moonlit Promenade",
     "Flint Forge Quarter",
     "Maplewood Conservatory",
     "Jasper Marina",
     "Sapphire Arena",
     "Silvercrest Observatory",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 38,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Jasper Marina",
     "Maplewood Conservatory",
     "Flint Forge Quarter",
     "Shadowbridge Arcade",
     "Knight’s Market",
     "Sapphire Arena",
     "Moonlit Promenade",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 45,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 18,
  "adj": [
   [
    0,
    6,
    2,
    8,
    6,
    6,
    5,
    1,
    7,
    4
   ],
   [
    6,
    0,
    2,
    4,
    10,
    4,
    8,
    9,
    7,
    3
   ],
   [
    2,
    2,
    0,
    3,
    10,
    8,
    5,
    10,
    2,
    6
   ],
   [
    8,
    4,
    3,
    0,
    6,
    1,
    8,
    1,
    1,
    8
   ],
   [
    6,
    10,
    10,
    6,
    0,
    10,
    9,
    8,
    10,
    3
   ],
   [
    6,
    4,
    8,
    1,
    10,
    0,
    2,
    6,
    10,
    6
   ],
   [
    5,
    8,
    5,
    8,
    9,
    2,
    0,
    10,
    1,
    3
   ],
   [
    1,
    9,
    10,
    1,
    8,
    6,
    10,
    0,
    9,
    4
   ],
   [
    7,
    7,
    2,
    1,
    10,
    10,
    1,
    9,
    0,
    7
   ],
   [
    4,
    3,
    6,
    8,
    3,
    6,
    3,
    4,
    7,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Westgate Station",
   "Opal Theater",
   "Amber Plaza",
   "Azure Gardens",
   "Willowshade Pavilion",
   "Ivory Spire Cathedral",
   "Granite Plaza",
   "Silvercrest Observatory",
   "Yarrow Plaza"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Azure Gardens",
     "Yarrow Plaza",
     "Westgate Station",
     "Opal Theater",
     "Silvercrest Observatory",
     "Ivory Spire Cathedral",
     "Willowshade Pavilion",
     "Amber Plaza",
     "Granite Plaza",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Westgate Station",
     "Yarrow Plaza",
     "Azure Gardens",
     "Amber Plaza",
     "Silvercrest Observatory",
     "Ivory Spire Cathedral",
     "Willowshade Pavilion",
     "Granite Plaza",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Amber Plaza",
     "Willowshade Pavilion",
     "Ivory Spire Cathedral",
     "Silvercrest Observatory",
     "Opal Theater",
     "Westgate Station",
     "Yarrow Plaza",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Amber Plaza",
     "Willowshade Pavilion",
     "Ivory Spire Cathedral",
     "Silvercrest Observatory",
     "Opal Theater",
     "Westgate Station",
     "Yarrow Plaza",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Westgate Station",
     "Yarrow Plaza",
     "Azure Gardens",
     "Amber Plaza",
     "Silvercrest Observatory",
     "Ivory Spire Cathedral",
     "Willowshade Pavilion",
     "Granite Plaza",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Amber Plaza",
     "Willowshade Pavilion",
     "Ivory Spire Cathedral",
     "Silvercrest Observatory",
     "Opal Theater",
     "Westgate Station",
     "Yarrow Plaza",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 19,
  "adj": [
   [
    0,
    10,
    1,
    3,
    1,
    4,
    4,
    6,
    7,
    7
   ],
   [
    10,
    0,
    3,
    7,
    1,
    2,
    5,
    7,
    10,
    9
   ],
   [
    1,
    3,
    0,
    4,
    7,
    5,
    3,
    2,
    6,
    4
   ],
   [
    3,
    7,
    4,
    0,
    7,
    6,
    4,
    4,
    10,
    3
   ],
   [
    1,
    1,
    7,
    7,
    0,
    10,
    6,
    8,
    10,
    8
   ],
   [
    4,
    2,
    5,
    6,
    10,
    0,
    8,
    10,
    1,
    7
   ],
   [
    4,
    5,
    3,
    4,
    6,
    8,
    0,
    10,
    3,
    4
   ],
   [
    6,
    7,
    2,
    4,
    8,
    10,
    10,
    0,
    4,
    1
   ],
   [
    7,
    10,
    6,
    10,
    10,
    1,
    3,
    4,
    0,
    5
   ],
   [
    7,
    9,
    4,
    3,
    8,
    7,
    4,
    1,
    5,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Moonlit Promenade",
   "Nimbus Plaza",
   "Northwind Tower",
   "Yarrow Plaza",
   "Oakshade Library",
   "Ivory Spire Cathedral",
   "Jasper Marina",
   "Zenith Arena",
   "Evergreen Circle"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Jasper Marina",
     "Evergreen Circle",
     "Northwind Tower",
     "Ivory Spire Cathedral",
     "Zenith Arena",
     "Oakshade Library",
     "Moonlit Promenade",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 19,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Northwind Tower",
     "Evergreen Circle",
     "Jasper Marina",
     "Nimbus Plaza",
     "Ivory Spire Cathedral",
     "Zenith Arena",
     "Oakshade Library",
     "Moonlit Promenade",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Jasper Marina",
     "Evergreen Circle",
     "Northwind Tower",
     "Ivory Spire Cathedral",
     "Zenith Arena",
     "Oakshade Library",
     "Moonlit Promenade",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 19,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Jasper Marina",
     "Evergreen Circle",
     "Northwind Tower",
     "Ivory Spire Cathedral",
     "Zenith Arena",
     "Oakshade Library",
     "Moonlit Promenade",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 19,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Moonlit Promenade",
     "Nimbus Plaza",
     "Jasper Marina",
     "Evergreen Circle",
     "Northwind Tower",
     "Ivory Spire Cathedral",
     "Zenith Arena",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Moonlit Promenade",
     "Oakshade Library",
     "Zenith Arena",
     "Ivory Spire Cathedral",
     "Nimbus Plaza",
     "Jasper Marina",
     "Evergreen Circle",
     "Northwind Tower",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled during the delivery route.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 20,
  "adj": [
   [
    0,
    2,
    9,
    6,
    6,
    1,
    7,
    9,
    10,
    8
   ],
   [
    2,
    0,
    2,
    8,
    5,
    4,
    2,
    4,
    10,
    5
   ],
   [
    9,
    2,
    0,
    4,
    1,
    3,
    2,
    1,
    6,
    3
   ],
   [
    6,
    8,
    4,
    0,
    4,
    5,
    2,
    5,
    9,
    3
   ],
   [
    6,
    5,
    1,
    4,
    0,
    3,
    2,
    6,
    3,
    7
   ],
   [
    1,
    4,
    3,
    5,
    3,
    0,
    8,
    7,
    4,
    6
   ],
   [
    7,
    2,
    2,
    2,
    2,
    8,
    0,
    2,
    9,
    10
   ],
   [
    9,
    4,
    1,
    5,
    6,
    7,
    2,
    0,
    6,
    5
   ],
   [
    10,
    10,
    6,
    9,
    3,
    4,
    9,
    6,
    0,
    9
   ],
   [
    8,
    5,
    3,
    3,
    7,
    6,
    10,
    5,
    9,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Mosaic Plaza",
   "Oakshade Library",
   "Beacon Tower",
   "Cobalt Market",
   "Quartz District",
   "Duskwood Park",
   "Riverstone Wharf",
   "Twilight Harbor",
   "Dragon’s Gate"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Mosaic Plaza",
     "Duskwood Park",
     "Beacon Tower",
     "Dragon’s Gate",
     "Riverstone Wharf",
     "Oakshade Library",
     "Cobalt Market",
     "Twilight Harbor",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Oakshade Library",
     "Dragon’s Gate",
     "Beacon Tower",
     "Duskwood Park",
     "Cobalt Market",
     "Twilight Harbor",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Oakshade Library",
     "Cobalt Market",
     "Duskwood Park",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Beacon Tower",
     "Dragon’s Gate",
     "Twilight Harbor",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Oakshade Library",
     "Cobalt Market",
     "Duskwood Park",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Beacon Tower",
     "Dragon’s Gate",
     "Twilight Harbor",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Cobalt Market",
     "Twilight Harbor",
     "Riverstone Wharf",
     "Oakshade Library",
     "Dragon’s Gate",
     "Beacon Tower",
     "Duskwood Park",
     "Mosaic Plaza",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Mosaic Plaza",
     "Oakshade Library",
     "Riverstone Wharf",
     "Beacon Tower",
     "Duskwood Park",
     "Cobalt Market",
     "Twilight Harbor",
     "Dragon’s Gate",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Determine the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 21,
  "adj": [
   [
    0,
    1,
    6,
    10,
    1,
    3,
    7,
    9,
    6,
    6
   ],
   [
    1,
    0,
    3,
    2,
    9,
    9,
    3,
    10,
    1,
    3
   ],
   [
    6,
    3,
    0,
    9,
    9,
    1,
    5,
    4,
    7,
    9
   ],
   [
    10,
    2,
    9,
    0,
    10,
    9,
    6,
    3,
    3,
    5
   ],
   [
    1,
    9,
    9,
    10,
    0,
    7,
    3,
    6,
    7,
    4
   ],
   [
    3,
    9,
    1,
    9,
    7,
    0,
    4,
    2,
    7,
    3
   ],
   [
    7,
    3,
    5,
    6,
    3,
    4,
    0,
    10,
    6,
    7
   ],
   [
    9,
    10,
    4,
    3,
    6,
    2,
    10,
    0,
    5,
    3
   ],
   [
    6,
    1,
    7,
    3,
    7,
    7,
    6,
    5,
    0,
    2
   ],
   [
    6,
    3,
    9,
    5,
    4,
    3,
    7,
    3,
    2,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Rosewood Hall",
   "Quarry Point",
   "Evergreen Circle",
   "Quartz District",
   "Granite Plaza",
   "Flare Alley",
   "Lighthouse Point",
   "Northwind Tower",
   "Duskwood Park"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Evergreen Circle",
     "Northwind Tower",
     "Duskwood Park",
     "Lighthouse Point",
     "Granite Plaza",
     "Quarry Point",
     "Flare Alley",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Granite Plaza",
     "Quarry Point",
     "Lighthouse Point",
     "Duskwood Park",
     "Northwind Tower",
     "Rosewood Hall",
     "Flare Alley",
     "Evergreen Circle",
     "Warehouse"
    ],
    "ans_distance": 38,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Northwind Tower",
     "Duskwood Park",
     "Granite Plaza",
     "Quarry Point",
     "Lighthouse Point",
     "Evergreen Circle",
     "Flare Alley",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Northwind Tower",
     "Duskwood Park",
     "Granite Plaza",
     "Quarry Point",
     "Lighthouse Point",
     "Evergreen Circle",
     "Flare Alley",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Quartz District",
     "Flare Alley",
     "Rosewood Hall",
     "Evergreen Circle",
     "Northwind Tower",
     "Duskwood Park",
     "Lighthouse Point",
     "Quarry Point",
     "Granite Plaza",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Northwind Tower",
     "Duskwood Park",
     "Granite Plaza",
     "Quarry Point",
     "Lighthouse Point",
     "Evergreen Circle",
     "Flare Alley",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 22,
  "adj": [
   [
    0,
    3,
    4,
    1,
    8,
    6,
    9,
    5,
    5,
    7
   ],
   [
    3,
    0,
    10,
    3,
    1,
    8,
    8,
    10,
    10,
    6
   ],
   [
    4,
    10,
    0,
    2,
    3,
    3,
    4,
    1,
    10,
    7
   ],
   [
    1,
    3,
    2,
    0,
    5,
    5,
    3,
    2,
    7,
    5
   ],
   [
    8,
    1,
    3,
    5,
    0,
    1,
    8,
    1,
    4,
    2
   ],
   [
    6,
    8,
    3,
    5,
    1,
    0,
    4,
    2,
    9,
    3
   ],
   [
    9,
    8,
    4,
    3,
    8,
    4,
    0,
    3,
    10,
    7
   ],
   [
    5,
    10,
    1,
    2,
    1,
    2,
    3,
    0,
    6,
    5
   ],
   [
    5,
    10,
    10,
    7,
    4,
    9,
    10,
    6,
    0,
    4
   ],
   [
    7,
    6,
    7,
    5,
    2,
    3,
    7,
    5,
    4,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Yarrow Plaza",
   "Twilight Harbor",
   "Northwind Tower",
   "Rosewood Hall",
   "Granite Plaza",
   "Nimbus Plaza",
   "Cobalt Market",
   "Oakshade Library",
   "Sapphire Arena"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Rosewood Hall",
     "Oakshade Library",
     "Sapphire Arena",
     "Granite Plaza",
     "Twilight Harbor",
     "Cobalt Market",
     "Nimbus Plaza",
     "Northwind Tower",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Northwind Tower",
     "Nimbus Plaza",
     "Granite Plaza",
     "Rosewood Hall",
     "Oakshade Library",
     "Sapphire Arena",
     "Yarrow Plaza",
     "Cobalt Market",
     "Twilight Harbor",
     "Warehouse"
    ],
    "ans_distance": 38,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Northwind Tower",
     "Twilight Harbor",
     "Cobalt Market",
     "Rosewood Hall",
     "Yarrow Plaza",
     "Sapphire Arena",
     "Granite Plaza",
     "Nimbus Plaza",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 34,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Northwind Tower",
     "Twilight Harbor",
     "Cobalt Market",
     "Rosewood Hall",
     "Yarrow Plaza",
     "Sapphire Arena",
     "Granite Plaza",
     "Nimbus Plaza",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 34,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Rosewood Hall",
     "Cobalt Market",
     "Twilight Harbor",
     "Northwind Tower",
     "Nimbus Plaza",
     "Granite Plaza",
     "Sapphire Arena",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Oakshade Library",
     "Sapphire Arena",
     "Rosewood Hall",
     "Twilight Harbor",
     "Nimbus Plaza",
     "Cobalt Market",
     "Granite Plaza",
     "Yarrow Plaza",
     "Northwind Tower",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Determine the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 23,
  "adj": [
   [
    0,
    2,
    8,
    10,
    2,
    3,
    1,
    10,
    9,
    3
   ],
   [
    2,
    0,
    9,
    10,
    1,
    9,
    4,
    2,
    7,
    10
   ],
   [
    8,
    9,
    0,
    10,
    10,
    5,
    2,
    9,
    8,
    7
   ],
   [
    10,
    10,
    10,
    0,
    4,
    8,
    1,
    3,
    8,
    8
   ],
   [
    2,
    1,
    10,
    4,
    0,
    8,
    3,
    2,
    1,
    9
   ],
   [
    3,
    9,
    5,
    8,
    8,
    0,
    7,
    5,
    4,
    3
   ],
   [
    1,
    4,
    2,
    1,
    3,
    7,
    0,
    4,
    2,
    3
   ],
   [
    10,
    2,
    9,
    3,
    2,
    5,
    4,
    0,
    7,
    8
   ],
   [
    9,
    7,
    8,
    8,
    1,
    4,
    2,
    7,
    0,
    2
   ],
   [
    3,
    10,
    7,
    8,
    9,
    3,
    3,
    8,
    2,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Zenith Arena",
   "King’s Row",
   "Cobalt Market",
   "Silvercrest Observatory",
   "Duskwood Park",
   "Flare Alley",
   "Lighthouse Point",
   "Jasper Marina",
   "Brass Lantern Tavern"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Zenith Arena",
     "Lighthouse Point",
     "Cobalt Market",
     "Flare Alley",
     "King’s Row",
     "Duskwood Park",
     "Brass Lantern Tavern",
     "Jasper Marina",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Duskwood Park",
     "Brass Lantern Tavern",
     "Jasper Marina",
     "Silvercrest Observatory",
     "Zenith Arena",
     "Lighthouse Point",
     "Cobalt Market",
     "Flare Alley",
     "King’s Row",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Flare Alley",
     "Cobalt Market",
     "Lighthouse Point",
     "Zenith Arena",
     "Silvercrest Observatory",
     "Jasper Marina",
     "Brass Lantern Tavern",
     "Duskwood Park",
     "King’s Row",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Flare Alley",
     "Cobalt Market",
     "Lighthouse Point",
     "Zenith Arena",
     "Silvercrest Observatory",
     "Jasper Marina",
     "Brass Lantern Tavern",
     "Duskwood Park",
     "King’s Row",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Flare Alley",
     "King’s Row",
     "Duskwood Park",
     "Brass Lantern Tavern",
     "Jasper Marina",
     "Silvercrest Observatory",
     "Cobalt Market",
     "Lighthouse Point",
     "Zenith Arena",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Silvercrest Observatory",
     "Jasper Marina",
     "Flare Alley",
     "Cobalt Market",
     "Lighthouse Point",
     "Zenith Arena",
     "King’s Row",
     "Brass Lantern Tavern",
     "Duskwood Park",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 24,
  "adj": [
   [
    0,
    4,
    1,
    10,
    7,
    4,
    1,
    3,
    6,
    7
   ],
   [
    4,
    0,
    5,
    1,
    6,
    9,
    10,
    3,
    2,
    10
   ],
   [
    1,
    5,
    0,
    5,
    7,
    4,
    7,
    6,
    1,
    6
   ],
   [
    10,
    1,
    5,
    0,
    1,
    4,
    5,
    4,
    10,
    3
   ],
   [
    7,
    6,
    7,
    1,
    0,
    4,
    8,
    10,
    8,
    9
   ],
   [
    4,
    9,
    4,
    4,
    4,
    0,
    8,
    4,
    9,
    7
   ],
   [
    1,
    10,
    7,
    5,
    8,
    8,
    0,
    4,
    7,
    3
   ],
   [
    3,
    3,
    6,
    4,
    10,
    4,
    4,
    0,
    2,
    4
   ],
   [
    6,
    2,
    1,
    10,
    8,
    9,
    7,
    2,
    0,
    8
   ],
   [
    7,
    10,
    6,
    3,
    9,
    7,
    3,
    4,
    8,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Skyline Gardens",
   "Gilded Archway",
   "Flare Alley",
   "Nimbus Plaza",
   "Haven Docks",
   "Quartz District",
   "Echo Station",
   "King’s Row",
   "Ironbridge Crossing"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "King’s Row",
     "Skyline Gardens",
     "Flare Alley",
     "Nimbus Plaza",
     "Haven Docks",
     "Echo Station",
     "Ironbridge Crossing",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Haven Docks",
     "Quartz District",
     "Ironbridge Crossing",
     "Flare Alley",
     "Nimbus Plaza",
     "Skyline Gardens",
     "King’s Row",
     "Echo Station",
     "Gilded Archway",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "King’s Row",
     "Skyline Gardens",
     "Flare Alley",
     "Nimbus Plaza",
     "Haven Docks",
     "Echo Station",
     "Quartz District",
     "Ironbridge Crossing",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "King’s Row",
     "Skyline Gardens",
     "Flare Alley",
     "Nimbus Plaza",
     "Haven Docks",
     "Echo Station",
     "Quartz District",
     "Ironbridge Crossing",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "Haven Docks",
     "Nimbus Plaza",
     "Flare Alley",
     "Skyline Gardens",
     "King’s Row",
     "Echo Station",
     "Ironbridge Crossing",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "King’s Row",
     "Skyline Gardens",
     "Echo Station",
     "Ironbridge Crossing",
     "Flare Alley",
     "Nimbus Plaza",
     "Haven Docks",
     "Quartz District",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 25,
  "adj": [
   [
    0,
    6,
    10,
    8,
    6,
    10,
    5,
    2,
    5,
    9
   ],
   [
    6,
    0,
    10,
    5,
    9,
    1,
    1,
    6,
    9,
    1
   ],
   [
    10,
    10,
    0,
    2,
    2,
    9,
    10,
    7,
    8,
    2
   ],
   [
    8,
    5,
    2,
    0,
    9,
    6,
    10,
    1,
    4,
    3
   ],
   [
    6,
    9,
    2,
    9,
    0,
    10,
    3,
    1,
    9,
    2
   ],
   [
    10,
    1,
    9,
    6,
    10,
    0,
    7,
    9,
    3,
    7
   ],
   [
    5,
    1,
    10,
    10,
    3,
    7,
    0,
    2,
    7,
    9
   ],
   [
    2,
    6,
    7,
    1,
    1,
    9,
    2,
    0,
    5,
    9
   ],
   [
    5,
    9,
    8,
    4,
    9,
    3,
    7,
    5,
    0,
    9
   ],
   [
    9,
    1,
    2,
    3,
    2,
    7,
    9,
    9,
    9,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Horizon Mall",
   "Flint Forge Quarter",
   "Temple Square",
   "Westgate Station",
   "Opal Theater",
   "Nimbus Plaza",
   "Rosewood Hall",
   "Sapphire Arena",
   "Azure Gardens"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Temple Square",
     "Flint Forge Quarter",
     "Azure Gardens",
     "Westgate Station",
     "Nimbus Plaza",
     "Horizon Mall",
     "Opal Theater",
     "Sapphire Arena",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Opal Theater",
     "Horizon Mall",
     "Nimbus Plaza",
     "Azure Gardens",
     "Flint Forge Quarter",
     "Temple Square",
     "Rosewood Hall",
     "Westgate Station",
     "Warehouse"
    ],
    "ans_distance": 31,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Temple Square",
     "Flint Forge Quarter",
     "Westgate Station",
     "Azure Gardens",
     "Horizon Mall",
     "Opal Theater",
     "Sapphire Arena",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Temple Square",
     "Flint Forge Quarter",
     "Westgate Station",
     "Azure Gardens",
     "Horizon Mall",
     "Opal Theater",
     "Sapphire Arena",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Westgate Station",
     "Nimbus Plaza",
     "Sapphire Arena",
     "Opal Theater",
     "Horizon Mall",
     "Azure Gardens",
     "Flint Forge Quarter",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Westgate Station",
     "Azure Gardens",
     "Flint Forge Quarter",
     "Temple Square",
     "Horizon Mall",
     "Opal Theater",
     "Sapphire Arena",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 1.22
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 26,
  "adj": [
   [
    0,
    7,
    2,
    3,
    4,
    9,
    8,
    2,
    1,
    3
   ],
   [
    7,
    0,
    3,
    3,
    5,
    4,
    4,
    9,
    10,
    7
   ],
   [
    2,
    3,
    0,
    3,
    9,
    10,
    1,
    9,
    5,
    9
   ],
   [
    3,
    3,
    3,
    0,
    6,
    10,
    5,
    9,
    9,
    7
   ],
   [
    4,
    5,
    9,
    6,
    0,
    2,
    1,
    8,
    1,
    5
   ],
   [
    9,
    4,
    10,
    10,
    2,
    0,
    2,
    8,
    10,
    3
   ],
   [
    8,
    4,
    1,
    5,
    1,
    2,
    0,
    8,
    10,
    9
   ],
   [
    2,
    9,
    9,
    9,
    8,
    8,
    8,
    0,
    7,
    7
   ],
   [
    1,
    10,
    5,
    9,
    1,
    10,
    10,
    7,
    0,
    6
   ],
   [
    3,
    7,
    9,
    7,
    5,
    3,
    9,
    7,
    6,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Lighthouse Point",
   "Haven Docks",
   "Mosaic Plaza",
   "Moonlit Promenade",
   "Dragon’s Gate",
   "Quarry Point",
   "Willowshade Pavilion",
   "Amber Plaza",
   "Ivory Spire Cathedral"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Willowshade Pavilion",
     "Ivory Spire Cathedral",
     "Dragon’s Gate",
     "Lighthouse Point",
     "Mosaic Plaza",
     "Haven Docks",
     "Quarry Point",
     "Moonlit Promenade",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Ivory Spire Cathedral",
     "Willowshade Pavilion",
     "Mosaic Plaza",
     "Lighthouse Point",
     "Haven Docks",
     "Quarry Point",
     "Moonlit Promenade",
     "Dragon’s Gate",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Amber Plaza",
     "Moonlit Promenade",
     "Quarry Point",
     "Haven Docks",
     "Lighthouse Point",
     "Mosaic Plaza",
     "Ivory Spire Cathedral",
     "Dragon’s Gate",
     "Willowshade Pavilion",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Amber Plaza",
     "Moonlit Promenade",
     "Quarry Point",
     "Haven Docks",
     "Lighthouse Point",
     "Mosaic Plaza",
     "Ivory Spire Cathedral",
     "Dragon’s Gate",
     "Willowshade Pavilion",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Ivory Spire Cathedral",
     "Dragon’s Gate",
     "Moonlit Promenade",
     "Quarry Point",
     "Haven Docks",
     "Lighthouse Point",
     "Mosaic Plaza",
     "Willowshade Pavilion",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Willowshade Pavilion",
     "Ivory Spire Cathedral",
     "Lighthouse Point",
     "Haven Docks",
     "Mosaic Plaza",
     "Quarry Point",
     "Dragon’s Gate",
     "Moonlit Promenade",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 27,
  "adj": [
   [
    0,
    6,
    10,
    6,
    9,
    7,
    9,
    10,
    5,
    4
   ],
   [
    6,
    0,
    9,
    1,
    3,
    7,
    2,
    4,
    8,
    6
   ],
   [
    10,
    9,
    0,
    7,
    10,
    1,
    1,
    8,
    9,
    6
   ],
   [
    6,
    1,
    7,
    0,
    6,
    10,
    9,
    2,
    10,
    9
   ],
   [
    9,
    3,
    10,
    6,
    0,
    5,
    7,
    9,
    4,
    5
   ],
   [
    7,
    7,
    1,
    10,
    5,
    0,
    4,
    4,
    2,
    5
   ],
   [
    9,
    2,
    1,
    9,
    7,
    4,
    0,
    6,
    5,
    6
   ],
   [
    10,
    4,
    8,
    2,
    9,
    4,
    6,
    0,
    7,
    2
   ],
   [
    5,
    8,
    9,
    10,
    4,
    2,
    5,
    7,
    0,
    9
   ],
   [
    4,
    6,
    6,
    9,
    5,
    5,
    6,
    2,
    9,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Gilded Archway",
   "Shadowbridge Arcade",
   "Westgate Station",
   "Temple Square",
   "Jade Fountain",
   "Flare Alley",
   "Yarrow Plaza",
   "Opal Theater",
   "Amber Plaza"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Temple Square",
     "Jade Fountain",
     "Shadowbridge Arcade",
     "Flare Alley",
     "Gilded Archway",
     "Westgate Station",
     "Yarrow Plaza",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Jade Fountain",
     "Shadowbridge Arcade",
     "Flare Alley",
     "Gilded Archway",
     "Temple Square",
     "Westgate Station",
     "Yarrow Plaza",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Amber Plaza",
     "Yarrow Plaza",
     "Westgate Station",
     "Gilded Archway",
     "Flare Alley",
     "Shadowbridge Arcade",
     "Jade Fountain",
     "Opal Theater",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Amber Plaza",
     "Yarrow Plaza",
     "Westgate Station",
     "Gilded Archway",
     "Flare Alley",
     "Shadowbridge Arcade",
     "Jade Fountain",
     "Opal Theater",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "Westgate Station",
     "Yarrow Plaza",
     "Amber Plaza",
     "Temple Square",
     "Opal Theater",
     "Jade Fountain",
     "Shadowbridge Arcade",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Temple Square",
     "Gilded Archway",
     "Westgate Station",
     "Shadowbridge Arcade",
     "Flare Alley",
     "Jade Fountain",
     "Opal Theater",
     "Yarrow Plaza",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 28,
  "adj": [
   [
    0,
    6,
    10,
    7,
    9,
    7,
    3,
    10,
    2,
    8
   ],
   [
    6,
    0,
    7,
    10,
    2,
    3,
    2,
    2,
    10,
    1
   ],
   [
    10,
    7,
    0,
    9,
    2,
    2,
    3,
    7,
    3,
    10
   ],
   [
    7,
    10,
    9,
    0,
    9,
    1,
    6,
    7,
    10,
    6
   ],
   [
    9,
    2,
    2,
    9,
    0,
    4,
    10,
    4,
    10,
    7
   ],
   [
    7,
    3,
    2,
    1,
    4,
    0,
    1,
    2,
    2,
    10
   ],
   [
    3,
    2,
    3,
    6,
    10,
    1,
    0,
    4,
    9,
    5
   ],
   [
    10,
    2,
    7,
    7,
    4,
    2,
    4,
    0,
    3,
    3
   ],
   [
    2,
    10,
    3,
    10,
    10,
    2,
    9,
    3,
    0,
    10
   ],
   [
    8,
    1,
    10,
    6,
    7,
    10,
    5,
    3,
    10,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Westgate Station",
   "Primrose Boulevard",
   "Sapphire Arena",
   "Nimbus Plaza",
   "Haven Docks",
   "Rosewood Hall",
   "Brass Lantern Tavern",
   "Temple Square",
   "Northwind Tower"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Haven Docks",
     "Rosewood Hall",
     "Primrose Boulevard",
     "Nimbus Plaza",
     "Westgate Station",
     "Northwind Tower",
     "Brass Lantern Tavern",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Haven Docks",
     "Rosewood Hall",
     "Westgate Station",
     "Brass Lantern Tavern",
     "Northwind Tower",
     "Nimbus Plaza",
     "Primrose Boulevard",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Temple Square",
     "Haven Docks",
     "Sapphire Arena",
     "Rosewood Hall",
     "Westgate Station",
     "Northwind Tower",
     "Brass Lantern Tavern",
     "Nimbus Plaza",
     "Primrose Boulevard",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Temple Square",
     "Haven Docks",
     "Sapphire Arena",
     "Rosewood Hall",
     "Westgate Station",
     "Northwind Tower",
     "Brass Lantern Tavern",
     "Nimbus Plaza",
     "Primrose Boulevard",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Westgate Station",
     "Northwind Tower",
     "Sapphire Arena",
     "Haven Docks",
     "Primrose Boulevard",
     "Nimbus Plaza",
     "Brass Lantern Tavern",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Temple Square",
     "Primrose Boulevard",
     "Nimbus Plaza",
     "Westgate Station",
     "Northwind Tower",
     "Brass Lantern Tavern",
     "Haven Docks",
     "Sapphire Arena",
     "Rosewood Hall",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 1.22
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 29,
  "adj": [
   [
    0,
    7,
    7,
    6,
    1,
    1,
    5,
    2,
    4,
    8
   ],
   [
    7,
    0,
    10,
    3,
    10,
    10,
    7,
    10,
    9,
    7
   ],
   [
    7,
    10,
    0,
    1,
    4,
    3,
    9,
    7,
    2,
    10
   ],
   [
    6,
    3,
    1,
    0,
    3,
    3,
    4,
    10,
    7,
    8
   ],
   [
    1,
    10,
    4,
    3,
    0,
    6,
    7,
    1,
    1,
    5
   ],
   [
    1,
    10,
    3,
    3,
    6,
    0,
    6,
    5,
    3,
    4
   ],
   [
    5,
    7,
    9,
    4,
    7,
    6,
    0,
    8,
    1,
    3
   ],
   [
    2,
    10,
    7,
    10,
    1,
    5,
    8,
    0,
    6,
    5
   ],
   [
    4,
    9,
    2,
    7,
    1,
    3,
    1,
    6,
    0,
    7
   ],
   [
    8,
    7,
    10,
    8,
    5,
    4,
    3,
    5,
    7,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Opal Theater",
   "Gilded Archway",
   "Skyline Gardens",
   "Willowshade Pavilion",
   "Azure Gardens",
   "Oakshade Library",
   "Knight’s Market",
   "Riverstone Wharf",
   "Shadowbridge Arcade"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Azure Gardens",
     "Gilded Archway",
     "Skyline Gardens",
     "Opal Theater",
     "Shadowbridge Arcade",
     "Oakshade Library",
     "Riverstone Wharf",
     "Willowshade Pavilion",
     "Knight’s Market",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Azure Gardens",
     "Riverstone Wharf",
     "Oakshade Library",
     "Shadowbridge Arcade",
     "Opal Theater",
     "Skyline Gardens",
     "Gilded Archway",
     "Willowshade Pavilion",
     "Knight’s Market",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Willowshade Pavilion",
     "Knight’s Market",
     "Azure Gardens",
     "Gilded Archway",
     "Skyline Gardens",
     "Opal Theater",
     "Oakshade Library",
     "Riverstone Wharf",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Willowshade Pavilion",
     "Knight’s Market",
     "Azure Gardens",
     "Gilded Archway",
     "Skyline Gardens",
     "Opal Theater",
     "Oakshade Library",
     "Riverstone Wharf",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Azure Gardens",
     "Riverstone Wharf",
     "Gilded Archway",
     "Skyline Gardens",
     "Opal Theater",
     "Oakshade Library",
     "Shadowbridge Arcade",
     "Knight’s Market",
     "Willowshade Pavilion",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Azure Gardens",
     "Shadowbridge Arcade",
     "Oakshade Library",
     "Riverstone Wharf",
     "Willowshade Pavilion",
     "Opal Theater",
     "Skyline Gardens",
     "Gilded Archway",
     "Knight’s Market",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 30,
  "adj": [
   [
    0,
    8,
    9,
    7,
    5,
    4,
    5,
    8,
    1,
    7
   ],
   [
    8,
    0,
    7,
    5,
    2,
    4,
    8,
    2,
    7,
    7
   ],
   [
    9,
    7,
    0,
    1,
    4,
    6,
    10,
    6,
    1,
    6
   ],
   [
    7,
    5,
    1,
    0,
    1,
    9,
    6,
    5,
    4,
    2
   ],
   [
    5,
    2,
    4,
    1,
    0,
    5,
    7,
    9,
    1,
    5
   ],
   [
    4,
    4,
    6,
    9,
    5,
    0,
    7,
    3,
    4,
    3
   ],
   [
    5,
    8,
    10,
    6,
    7,
    7,
    0,
    10,
    5,
    5
   ],
   [
    8,
    2,
    6,
    5,
    9,
    3,
    10,
    0,
    1,
    7
   ],
   [
    1,
    7,
    1,
    4,
    1,
    4,
    5,
    1,
    0,
    2
   ],
   [
    7,
    7,
    6,
    2,
    5,
    3,
    5,
    7,
    2,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Riverstone Wharf",
   "Ivory Spire Cathedral",
   "Brass Lantern Tavern",
   "Oakshade Library",
   "Sapphire Arena",
   "Lunar Pier",
   "Haven Docks",
   "Amber Plaza",
   "Quarry Point"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Lunar Pier",
     "Quarry Point",
     "Sapphire Arena",
     "Haven Docks",
     "Riverstone Wharf",
     "Oakshade Library",
     "Brass Lantern Tavern",
     "Ivory Spire Cathedral",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.04
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Lunar Pier",
     "Amber Plaza",
     "Haven Docks",
     "Sapphire Arena",
     "Riverstone Wharf",
     "Oakshade Library",
     "Brass Lantern Tavern",
     "Quarry Point",
     "Ivory Spire Cathedral",
     "Warehouse"
    ],
    "ans_distance": 38,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Amber Plaza",
     "Ivory Spire Cathedral",
     "Brass Lantern Tavern",
     "Oakshade Library",
     "Riverstone Wharf",
     "Haven Docks",
     "Sapphire Arena",
     "Quarry Point",
     "Lunar Pier",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Amber Plaza",
     "Ivory Spire Cathedral",
     "Brass Lantern Tavern",
     "Oakshade Library",
     "Riverstone Wharf",
     "Haven Docks",
     "Sapphire Arena",
     "Quarry Point",
     "Lunar Pier",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Lunar Pier",
     "Quarry Point",
     "Brass Lantern Tavern",
     "Oakshade Library",
     "Riverstone Wharf",
     "Haven Docks",
     "Sapphire Arena",
     "Ivory Spire Cathedral",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Lunar Pier",
     "Brass Lantern Tavern",
     "Oakshade Library",
     "Riverstone Wharf",
     "Haven Docks",
     "Sapphire Arena",
     "Quarry Point",
     "Ivory Spire Cathedral",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 31,
  "adj": [
   [
    0,
    3,
    4,
    3,
    2,
    4,
    1,
    6,
    8,
    3
   ],
   [
    3,
    0,
    10,
    9,
    10,
    7,
    4,
    6,
    9,
    8
   ],
   [
    4,
    10,
    0,
    5,
    7,
    5,
    2,
    5,
    2,
    3
   ],
   [
    3,
    9,
    5,
    0,
    9,
    6,
    3,
    4,
    4,
    5
   ],
   [
    2,
    10,
    7,
    9,
    0,
    5,
    2,
    10,
    1,
    9
   ],
   [
    4,
    7,
    5,
    6,
    5,
    0,
    7,
    6,
    6,
    7
   ],
   [
    1,
    4,
    2,
    3,
    2,
    7,
    0,
    1,
    2,
    3
   ],
   [
    6,
    6,
    5,
    4,
    10,
    6,
    1,
    0,
    8,
    9
   ],
   [
    8,
    9,
    2,
    4,
    1,
    6,
    2,
    8,
    0,
    8
   ],
   [
    3,
    8,
    3,
    5,
    9,
    7,
    3,
    9,
    8,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Pennywhistle Arcade",
   "Ironbridge Crossing",
   "Amber Plaza",
   "Echo Station",
   "Sapphire Arena",
   "Jade Fountain",
   "Granite Plaza",
   "Ivory Spire Cathedral",
   "Horizon Mall"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Pennywhistle Arcade",
     "Sapphire Arena",
     "Amber Plaza",
     "Granite Plaza",
     "Jade Fountain",
     "Echo Station",
     "Ivory Spire Cathedral",
     "Ironbridge Crossing",
     "Horizon Mall",
     "Warehouse"
    ],
    "ans_distance": 32,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Horizon Mall",
     "Amber Plaza",
     "Sapphire Arena",
     "Pennywhistle Arcade",
     "Echo Station",
     "Ivory Spire Cathedral",
     "Ironbridge Crossing",
     "Jade Fountain",
     "Granite Plaza",
     "Warehouse"
    ],
    "ans_distance": 43,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Jade Fountain",
     "Granite Plaza",
     "Amber Plaza",
     "Ivory Spire Cathedral",
     "Echo Station",
     "Sapphire Arena",
     "Ironbridge Crossing",
     "Horizon Mall",
     "Pennywhistle Arcade",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Jade Fountain",
     "Granite Plaza",
     "Amber Plaza",
     "Ivory Spire Cathedral",
     "Echo Station",
     "Sapphire Arena",
     "Ironbridge Crossing",
     "Horizon Mall",
     "Pennywhistle Arcade",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Echo Station",
     "Ivory Spire Cathedral",
     "Ironbridge Crossing",
     "Horizon Mall",
     "Amber Plaza",
     "Sapphire Arena",
     "Granite Plaza",
     "Jade Fountain",
     "Pennywhistle Arcade",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Pennywhistle Arcade",
     "Granite Plaza",
     "Amber Plaza",
     "Ivory Spire Cathedral",
     "Echo Station",
     "Jade Fountain",
     "Horizon Mall",
     "Sapphire Arena",
     "Ironbridge Crossing",
     "Warehouse"
    ],
    "ans_distance": 39,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 32,
  "adj": [
   [
    0,
    4,
    3,
    9,
    5,
    4,
    1,
    7,
    7,
    9
   ],
   [
    4,
    0,
    5,
    3,
    5,
    5,
    5,
    5,
    8,
    9
   ],
   [
    3,
    5,
    0,
    10,
    10,
    7,
    1,
    10,
    9,
    2
   ],
   [
    9,
    3,
    10,
    0,
    4,
    1,
    6,
    8,
    1,
    1
   ],
   [
    5,
    5,
    10,
    4,
    0,
    10,
    6,
    7,
    6,
    10
   ],
   [
    4,
    5,
    7,
    1,
    10,
    0,
    1,
    6,
    10,
    10
   ],
   [
    1,
    5,
    1,
    6,
    6,
    1,
    0,
    2,
    3,
    7
   ],
   [
    7,
    5,
    10,
    8,
    7,
    6,
    2,
    0,
    6,
    2
   ],
   [
    7,
    8,
    9,
    1,
    6,
    10,
    3,
    6,
    0,
    2
   ],
   [
    9,
    9,
    2,
    1,
    10,
    10,
    7,
    2,
    2,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Duskwood Park",
   "Umbra Theater",
   "Mosaic Plaza",
   "Gilded Archway",
   "Riverstone Wharf",
   "Quarry Point",
   "Ivory Spire Cathedral",
   "Twilight Harbor",
   "Knight’s Market"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Umbra Theater",
     "Quarry Point",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Twilight Harbor",
     "Knight’s Market",
     "Ivory Spire Cathedral",
     "Duskwood Park",
     "Gilded Archway",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Umbra Theater",
     "Quarry Point",
     "Ivory Spire Cathedral",
     "Knight’s Market",
     "Mosaic Plaza",
     "Twilight Harbor",
     "Gilded Archway",
     "Duskwood Park",
     "Riverstone Wharf",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quarry Point",
     "Umbra Theater",
     "Knight’s Market",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Duskwood Park",
     "Gilded Archway",
     "Twilight Harbor",
     "Ivory Spire Cathedral",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quarry Point",
     "Umbra Theater",
     "Knight’s Market",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Duskwood Park",
     "Gilded Archway",
     "Twilight Harbor",
     "Ivory Spire Cathedral",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Knight’s Market",
     "Ivory Spire Cathedral",
     "Quarry Point",
     "Twilight Harbor",
     "Gilded Archway",
     "Duskwood Park",
     "Umbra Theater",
     "Warehouse"
    ],
    "ans_distance": 32,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Duskwood Park",
     "Gilded Archway",
     "Umbra Theater",
     "Knight’s Market",
     "Ivory Spire Cathedral",
     "Twilight Harbor",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Quarry Point",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 33,
  "adj": [
   [
    0,
    4,
    8,
    5,
    6,
    3,
    5,
    10,
    1,
    5
   ],
   [
    4,
    0,
    1,
    2,
    7,
    5,
    9,
    2,
    7,
    1
   ],
   [
    8,
    1,
    0,
    7,
    6,
    2,
    6,
    3,
    4,
    3
   ],
   [
    5,
    2,
    7,
    0,
    6,
    1,
    7,
    9,
    7,
    9
   ],
   [
    6,
    7,
    6,
    6,
    0,
    2,
    3,
    1,
    4,
    2
   ],
   [
    3,
    5,
    2,
    1,
    2,
    0,
    5,
    10,
    8,
    7
   ],
   [
    5,
    9,
    6,
    7,
    3,
    5,
    0,
    4,
    5,
    9
   ],
   [
    10,
    2,
    3,
    9,
    1,
    10,
    4,
    0,
    6,
    6
   ],
   [
    1,
    7,
    4,
    7,
    4,
    8,
    5,
    6,
    0,
    7
   ],
   [
    5,
    1,
    3,
    9,
    2,
    7,
    9,
    6,
    7,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Rosewood Hall",
   "Duskwood Park",
   "Union Square Market",
   "Shadowbridge Arcade",
   "Twilight Harbor",
   "Northwind Tower",
   "Maplewood Conservatory",
   "Nimbus Plaza",
   "King’s Row"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Union Square Market",
     "Twilight Harbor",
     "Duskwood Park",
     "Rosewood Hall",
     "King’s Row",
     "Shadowbridge Arcade",
     "Maplewood Conservatory",
     "Northwind Tower",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Twilight Harbor",
     "Union Square Market",
     "Rosewood Hall",
     "King’s Row",
     "Duskwood Park",
     "Maplewood Conservatory",
     "Shadowbridge Arcade",
     "Northwind Tower",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 23,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Duskwood Park",
     "Rosewood Hall",
     "King’s Row",
     "Shadowbridge Arcade",
     "Maplewood Conservatory",
     "Northwind Tower",
     "Twilight Harbor",
     "Union Square Market",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Duskwood Park",
     "Rosewood Hall",
     "King’s Row",
     "Shadowbridge Arcade",
     "Maplewood Conservatory",
     "Northwind Tower",
     "Twilight Harbor",
     "Union Square Market",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Northwind Tower",
     "Twilight Harbor",
     "Union Square Market",
     "Rosewood Hall",
     "Duskwood Park",
     "King’s Row",
     "Shadowbridge Arcade",
     "Maplewood Conservatory",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "King’s Row",
     "Shadowbridge Arcade",
     "Northwind Tower",
     "Maplewood Conservatory",
     "Rosewood Hall",
     "Duskwood Park",
     "Twilight Harbor",
     "Union Square Market",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 34,
  "adj": [
   [
    0,
    3,
    3,
    2,
    5,
    10,
    2,
    8,
    3,
    4
   ],
   [
    3,
    0,
    8,
    7,
    2,
    4,
    10,
    2,
    1,
    3
   ],
   [
    3,
    8,
    0,
    2,
    10,
    7,
    9,
    7,
    6,
    3
   ],
   [
    2,
    7,
    2,
    0,
    5,
    4,
    2,
    4,
    7,
    1
   ],
   [
    5,
    2,
    10,
    5,
    0,
    5,
    8,
    5,
    2,
    4
   ],
   [
    10,
    4,
    7,
    4,
    5,
    0,
    8,
    7,
    1,
    8
   ],
   [
    2,
    10,
    9,
    2,
    8,
    8,
    0,
    9,
    3,
    1
   ],
   [
    8,
    2,
    7,
    4,
    5,
    7,
    9,
    0,
    9,
    9
   ],
   [
    3,
    1,
    6,
    7,
    2,
    1,
    3,
    9,
    0,
    9
   ],
   [
    4,
    3,
    3,
    1,
    4,
    8,
    1,
    9,
    9,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Yarrow Plaza",
   "Amber Plaza",
   "Willowshade Pavilion",
   "Ironbridge Crossing",
   "Primrose Boulevard",
   "Opal Theater",
   "Azure Gardens",
   "Knight’s Market",
   "Shadowbridge Arcade"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Azure Gardens",
     "Ironbridge Crossing",
     "Knight’s Market",
     "Primrose Boulevard",
     "Willowshade Pavilion",
     "Amber Plaza",
     "Shadowbridge Arcade",
     "Opal Theater",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Azure Gardens",
     "Ironbridge Crossing",
     "Knight’s Market",
     "Primrose Boulevard",
     "Amber Plaza",
     "Willowshade Pavilion",
     "Opal Theater",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Willowshade Pavilion",
     "Shadowbridge Arcade",
     "Opal Theater",
     "Knight’s Market",
     "Yarrow Plaza",
     "Ironbridge Crossing",
     "Primrose Boulevard",
     "Amber Plaza",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Willowshade Pavilion",
     "Shadowbridge Arcade",
     "Opal Theater",
     "Knight’s Market",
     "Yarrow Plaza",
     "Ironbridge Crossing",
     "Primrose Boulevard",
     "Amber Plaza",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Knight’s Market",
     "Primrose Boulevard",
     "Ironbridge Crossing",
     "Yarrow Plaza",
     "Azure Gardens",
     "Willowshade Pavilion",
     "Amber Plaza",
     "Shadowbridge Arcade",
     "Opal Theater",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Knight’s Market",
     "Ironbridge Crossing",
     "Primrose Boulevard",
     "Yarrow Plaza",
     "Azure Gardens",
     "Amber Plaza",
     "Willowshade Pavilion",
     "Opal Theater",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 32,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled during the delivery route.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 35,
  "adj": [
   [
    0,
    9,
    3,
    4,
    4,
    3,
    7,
    8,
    2,
    5
   ],
   [
    9,
    0,
    5,
    4,
    1,
    6,
    10,
    7,
    10,
    6
   ],
   [
    3,
    5,
    0,
    9,
    8,
    4,
    3,
    4,
    4,
    2
   ],
   [
    4,
    4,
    9,
    0,
    4,
    1,
    6,
    1,
    5,
    7
   ],
   [
    4,
    1,
    8,
    4,
    0,
    4,
    3,
    5,
    6,
    3
   ],
   [
    3,
    6,
    4,
    1,
    4,
    0,
    4,
    3,
    10,
    5
   ],
   [
    7,
    10,
    3,
    6,
    3,
    4,
    0,
    10,
    7,
    6
   ],
   [
    8,
    7,
    4,
    1,
    5,
    3,
    10,
    0,
    4,
    3
   ],
   [
    2,
    10,
    4,
    5,
    6,
    10,
    7,
    4,
    0,
    8
   ],
   [
    5,
    6,
    2,
    7,
    3,
    5,
    6,
    3,
    8,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Lighthouse Point",
   "Umbra Theater",
   "Gilded Archway",
   "Primrose Boulevard",
   "Flint Forge Quarter",
   "Mosaic Plaza",
   "Quartz District",
   "Velvet Corner",
   "Echo Station"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Flint Forge Quarter",
     "Gilded Archway",
     "Lighthouse Point",
     "Primrose Boulevard",
     "Mosaic Plaza",
     "Umbra Theater",
     "Echo Station",
     "Quartz District",
     "Velvet Corner",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Flint Forge Quarter",
     "Gilded Archway",
     "Quartz District",
     "Echo Station",
     "Umbra Theater",
     "Mosaic Plaza",
     "Primrose Boulevard",
     "Lighthouse Point",
     "Velvet Corner",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Velvet Corner",
     "Umbra Theater",
     "Echo Station",
     "Primrose Boulevard",
     "Lighthouse Point",
     "Gilded Archway",
     "Flint Forge Quarter",
     "Quartz District",
     "Mosaic Plaza",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Velvet Corner",
     "Umbra Theater",
     "Echo Station",
     "Primrose Boulevard",
     "Lighthouse Point",
     "Gilded Archway",
     "Flint Forge Quarter",
     "Quartz District",
     "Mosaic Plaza",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Velvet Corner",
     "Quartz District",
     "Gilded Archway",
     "Flint Forge Quarter",
     "Mosaic Plaza",
     "Primrose Boulevard",
     "Lighthouse Point",
     "Echo Station",
     "Umbra Theater",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Echo Station",
     "Umbra Theater",
     "Lighthouse Point",
     "Gilded Archway",
     "Quartz District",
     "Flint Forge Quarter",
     "Mosaic Plaza",
     "Primrose Boulevard",
     "Velvet Corner",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 1.25
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 36,
  "adj": [
   [
    0,
    7,
    7,
    9,
    2,
    10,
    6,
    2,
    2,
    3
   ],
   [
    7,
    0,
    6,
    9,
    1,
    4,
    2,
    7,
    7,
    1
   ],
   [
    7,
    6,
    0,
    10,
    5,
    3,
    9,
    7,
    10,
    9
   ],
   [
    9,
    9,
    10,
    0,
    1,
    10,
    6,
    5,
    10,
    3
   ],
   [
    2,
    1,
    5,
    1,
    0,
    7,
    7,
    5,
    10,
    1
   ],
   [
    10,
    4,
    3,
    10,
    7,
    0,
    4,
    8,
    2,
    4
   ],
   [
    6,
    2,
    9,
    6,
    7,
    4,
    0,
    5,
    1,
    7
   ],
   [
    2,
    7,
    7,
    5,
    5,
    8,
    5,
    0,
    2,
    2
   ],
   [
    2,
    7,
    10,
    10,
    10,
    2,
    1,
    2,
    0,
    3
   ],
   [
    3,
    1,
    9,
    3,
    1,
    4,
    7,
    2,
    3,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Zenith Arena",
   "Flare Alley",
   "Ivory Spire Cathedral",
   "Rosewood Hall",
   "Cobalt Market",
   "Pennywhistle Arcade",
   "Temple Square",
   "Sapphire Arena",
   "Flint Forge Quarter"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Flare Alley",
     "Cobalt Market",
     "Sapphire Arena",
     "Pennywhistle Arcade",
     "Zenith Arena",
     "Rosewood Hall",
     "Ivory Spire Cathedral",
     "Flint Forge Quarter",
     "Temple Square",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Flare Alley",
     "Cobalt Market",
     "Sapphire Arena",
     "Pennywhistle Arcade",
     "Temple Square",
     "Flint Forge Quarter",
     "Zenith Arena",
     "Rosewood Hall",
     "Ivory Spire Cathedral",
     "Warehouse"
    ],
    "ans_distance": 32,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Zenith Arena",
     "Flint Forge Quarter",
     "Temple Square",
     "Sapphire Arena",
     "Pennywhistle Arcade",
     "Cobalt Market",
     "Flare Alley",
     "Ivory Spire Cathedral",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Zenith Arena",
     "Flint Forge Quarter",
     "Temple Square",
     "Sapphire Arena",
     "Pennywhistle Arcade",
     "Cobalt Market",
     "Flare Alley",
     "Ivory Spire Cathedral",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Temple Square",
     "Flint Forge Quarter",
     "Ivory Spire Cathedral",
     "Rosewood Hall",
     "Zenith Arena",
     "Pennywhistle Arcade",
     "Sapphire Arena",
     "Cobalt Market",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Flare Alley",
     "Cobalt Market",
     "Sapphire Arena",
     "Pennywhistle Arcade",
     "Temple Square",
     "Flint Forge Quarter",
     "Zenith Arena",
     "Ivory Spire Cathedral",
     "Rosewood Hall",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 37,
  "adj": [
   [
    0,
    8,
    2,
    3,
    2,
    9,
    4,
    6,
    9,
    9
   ],
   [
    8,
    0,
    9,
    4,
    5,
    2,
    7,
    5,
    9,
    7
   ],
   [
    2,
    9,
    0,
    3,
    4,
    2,
    7,
    2,
    6,
    9
   ],
   [
    3,
    4,
    3,
    0,
    10,
    3,
    7,
    1,
    6,
    9
   ],
   [
    2,
    5,
    4,
    10,
    0,
    9,
    10,
    6,
    8,
    2
   ],
   [
    9,
    2,
    2,
    3,
    9,
    0,
    6,
    5,
    9,
    1
   ],
   [
    4,
    7,
    7,
    7,
    10,
    6,
    0,
    4,
    3,
    9
   ],
   [
    6,
    5,
    2,
    1,
    6,
    5,
    4,
    0,
    10,
    4
   ],
   [
    9,
    9,
    6,
    6,
    8,
    9,
    3,
    10,
    0,
    4
   ],
   [
    9,
    7,
    9,
    9,
    2,
    1,
    9,
    4,
    4,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Skyline Gardens",
   "Ivory Spire Cathedral",
   "Gilded Archway",
   "Primrose Boulevard",
   "Lighthouse Point",
   "Flint Forge Quarter",
   "Nimbus Plaza",
   "Azure Gardens",
   "Umbra Theater"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Ivory Spire Cathedral",
     "Lighthouse Point",
     "Skyline Gardens",
     "Gilded Archway",
     "Nimbus Plaza",
     "Flint Forge Quarter",
     "Azure Gardens",
     "Umbra Theater",
     "Primrose Boulevard",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Flint Forge Quarter",
     "Azure Gardens",
     "Umbra Theater",
     "Lighthouse Point",
     "Skyline Gardens",
     "Ivory Spire Cathedral",
     "Gilded Archway",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 41,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Ivory Spire Cathedral",
     "Lighthouse Point",
     "Umbra Theater",
     "Primrose Boulevard",
     "Skyline Gardens",
     "Gilded Archway",
     "Nimbus Plaza",
     "Flint Forge Quarter",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Ivory Spire Cathedral",
     "Lighthouse Point",
     "Umbra Theater",
     "Primrose Boulevard",
     "Skyline Gardens",
     "Gilded Archway",
     "Nimbus Plaza",
     "Flint Forge Quarter",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Umbra Theater",
     "Lighthouse Point",
     "Skyline Gardens",
     "Gilded Archway",
     "Nimbus Plaza",
     "Ivory Spire Cathedral",
     "Azure Gardens",
     "Flint Forge Quarter",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Umbra Theater",
     "Azure Gardens",
     "Flint Forge Quarter",
     "Skyline Gardens",
     "Nimbus Plaza",
     "Gilded Archway",
     "Lighthouse Point",
     "Ivory Spire Cathedral",
     "Warehouse"
    ],
    "ans_distance": 31,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 38,
  "adj": [
   [
    0,
    5,
    4,
    1,
    8,
    8,
    8,
    5,
    6,
    10
   ],
   [
    5,
    0,
    2,
    6,
    4,
    4,
    5,
    3,
    3,
    9
   ],
   [
    4,
    2,
    0,
    8,
    1,
    7,
    8,
    7,
    8,
    8
   ],
   [
    1,
    6,
    8,
    0,
    7,
    8,
    10,
    6,
    5,
    3
   ],
   [
    8,
    4,
    1,
    7,
    0,
    7,
    3,
    9,
    2,
    3
   ],
   [
    8,
    4,
    7,
    8,
    7,
    0,
    2,
    1,
    3,
    2
   ],
   [
    8,
    5,
    8,
    10,
    3,
    2,
    0,
    4,
    10,
    9
   ],
   [
    5,
    3,
    7,
    6,
    9,
    1,
    4,
    0,
    8,
    6
   ],
   [
    6,
    3,
    8,
    5,
    2,
    3,
    10,
    8,
    0,
    10
   ],
   [
    10,
    9,
    8,
    3,
    3,
    2,
    9,
    6,
    10,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Pennywhistle Arcade",
   "Riverstone Wharf",
   "Rosewood Hall",
   "Mosaic Plaza",
   "Maplewood Conservatory",
   "Sapphire Arena",
   "Willowshade Pavilion",
   "Lighthouse Point",
   "Copper Clock Square"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Riverstone Wharf",
     "Pennywhistle Arcade",
     "Lighthouse Point",
     "Mosaic Plaza",
     "Sapphire Arena",
     "Willowshade Pavilion",
     "Maplewood Conservatory",
     "Copper Clock Square",
     "Rosewood Hall",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Lighthouse Point",
     "Mosaic Plaza",
     "Riverstone Wharf",
     "Pennywhistle Arcade",
     "Willowshade Pavilion",
     "Maplewood Conservatory",
     "Sapphire Arena",
     "Copper Clock Square",
     "Rosewood Hall",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Copper Clock Square",
     "Maplewood Conservatory",
     "Willowshade Pavilion",
     "Pennywhistle Arcade",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Lighthouse Point",
     "Sapphire Arena",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Copper Clock Square",
     "Maplewood Conservatory",
     "Willowshade Pavilion",
     "Pennywhistle Arcade",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Lighthouse Point",
     "Sapphire Arena",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Copper Clock Square",
     "Maplewood Conservatory",
     "Lighthouse Point",
     "Pennywhistle Arcade",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Sapphire Arena",
     "Willowshade Pavilion",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Riverstone Wharf",
     "Mosaic Plaza",
     "Sapphire Arena",
     "Maplewood Conservatory",
     "Lighthouse Point",
     "Rosewood Hall",
     "Copper Clock Square",
     "Willowshade Pavilion",
     "Pennywhistle Arcade",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Determine the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 39,
  "adj": [
   [
    0,
    5,
    2,
    5,
    4,
    3,
    1,
    6,
    8,
    1
   ],
   [
    5,
    0,
    3,
    2,
    4,
    5,
    6,
    4,
    1,
    8
   ],
   [
    2,
    3,
    0,
    10,
    8,
    2,
    3,
    5,
    6,
    4
   ],
   [
    5,
    2,
    10,
    0,
    10,
    2,
    4,
    6,
    9,
    1
   ],
   [
    4,
    4,
    8,
    10,
    0,
    6,
    8,
    6,
    1,
    5
   ],
   [
    3,
    5,
    2,
    2,
    6,
    0,
    3,
    9,
    9,
    9
   ],
   [
    1,
    6,
    3,
    4,
    8,
    3,
    0,
    5,
    4,
    9
   ],
   [
    6,
    4,
    5,
    6,
    6,
    9,
    5,
    0,
    10,
    1
   ],
   [
    8,
    1,
    6,
    9,
    1,
    9,
    4,
    10,
    0,
    7
   ],
   [
    1,
    8,
    4,
    1,
    5,
    9,
    9,
    1,
    7,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Primrose Boulevard",
   "King’s Row",
   "Moonlit Promenade",
   "Skyline Gardens",
   "Northwind Tower",
   "Copper Clock Square",
   "Union Square Market",
   "Beacon Tower",
   "Zenith Arena"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Skyline Gardens",
     "Beacon Tower",
     "Primrose Boulevard",
     "Union Square Market",
     "Zenith Arena",
     "Moonlit Promenade",
     "Northwind Tower",
     "King’s Row",
     "Copper Clock Square",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Skyline Gardens",
     "Beacon Tower",
     "Primrose Boulevard",
     "Moonlit Promenade",
     "Zenith Arena",
     "Union Square Market",
     "King’s Row",
     "Northwind Tower",
     "Copper Clock Square",
     "Warehouse"
    ],
    "ans_distance": 21,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Copper Clock Square",
     "King’s Row",
     "Northwind Tower",
     "Moonlit Promenade",
     "Zenith Arena",
     "Union Square Market",
     "Primrose Boulevard",
     "Beacon Tower",
     "Skyline Gardens",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Copper Clock Square",
     "King’s Row",
     "Northwind Tower",
     "Moonlit Promenade",
     "Zenith Arena",
     "Union Square Market",
     "Primrose Boulevard",
     "Beacon Tower",
     "Skyline Gardens",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Copper Clock Square",
     "King’s Row",
     "Primrose Boulevard",
     "Beacon Tower",
     "Skyline Gardens",
     "Union Square Market",
     "Zenith Arena",
     "Moonlit Promenade",
     "Northwind Tower",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "King’s Row",
     "Northwind Tower",
     "Moonlit Promenade",
     "Primrose Boulevard",
     "Beacon Tower",
     "Copper Clock Square",
     "Union Square Market",
     "Zenith Arena",
     "Skyline Gardens",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 1.22
   }
  },
  "response": "{\n    \"objective\": \"Find the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 40,
  "adj": [
   [
    0,
    9,
    5,
    4,
    8,
    8,
    7,
    4,
    3,
    1
   ],
   [
    9,
    0,
    8,
    7,
    10,
    10,
    4,
    5,
    1,
    4
   ],
   [
    5,
    8,
    0,
    4,
    2,
    6,
    9,
    7,
    4,
    1
   ],
   [
    4,
    7,
    4,
    0,
    6,
    7,
    8,
    4,
    2,
    8
   ],
   [
    8,
    10,
    2,
    6,
    0,
    5,
    7,
    8,
    7,
    8
   ],
   [
    8,
    10,
    6,
    7,
    5,
    0,
    7,
    4,
    4,
    4
   ],
   [
    7,
    4,
    9,
    8,
    7,
    7,
    0,
    1,
    8,
    2
   ],
   [
    4,
    5,
    7,
    4,
    8,
    4,
    1,
    0,
    2,
    1
   ],
   [
    3,
    1,
    4,
    2,
    7,
    4,
    8,
    2,
    0,
    9
   ],
   [
    1,
    4,
    1,
    8,
    8,
    4,
    2,
    1,
    9,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Riverstone Wharf",
   "Union Square Market",
   "Haven Docks",
   "Opal Theater",
   "Maplewood Conservatory",
   "King’s Row",
   "Velvet Corner",
   "Jade Fountain",
   "Rosewood Hall"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Haven Docks",
     "Jade Fountain",
     "Riverstone Wharf",
     "King’s Row",
     "Velvet Corner",
     "Maplewood Conservatory",
     "Opal Theater",
     "Union Square Market",
     "Rosewood Hall",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Haven Docks",
     "Jade Fountain",
     "Riverstone Wharf",
     "Velvet Corner",
     "Rosewood Hall",
     "King’s Row",
     "Maplewood Conservatory",
     "Opal Theater",
     "Union Square Market",
     "Warehouse"
    ],
    "ans_distance": 34,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Union Square Market",
     "Opal Theater",
     "Maplewood Conservatory",
     "Velvet Corner",
     "King’s Row",
     "Riverstone Wharf",
     "Jade Fountain",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Union Square Market",
     "Opal Theater",
     "Maplewood Conservatory",
     "Velvet Corner",
     "King’s Row",
     "Riverstone Wharf",
     "Jade Fountain",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 25,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Velvet Corner",
     "King’s Row",
     "Riverstone Wharf",
     "Jade Fountain",
     "Haven Docks",
     "Maplewood Conservatory",
     "Opal Theater",
     "Union Square Market",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Rosewood Hall",
     "Riverstone Wharf",
     "King’s Row",
     "Velvet Corner",
     "Jade Fountain",
     "Haven Docks",
     "Maplewood Conservatory",
     "Opal Theater",
     "Union Square Market",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 41,
  "adj": [
   [
    0,
    7,
    7,
    10,
    4,
    1,
    10,
    2,
    4,
    5
   ],
   [
    7,
    0,
    10,
    7,
    10,
    6,
    3,
    1,
    6,
    8
   ],
   [
    7,
    10,
    0,
    6,
    10,
    9,
    8,
    9,
    6,
    9
   ],
   [
    10,
    7,
    6,
    0,
    9,
    3,
    5,
    1,
    9,
    7
   ],
   [
    4,
    10,
    10,
    9,
    0,
    7,
    2,
    1,
    9,
    6
   ],
   [
    1,
    6,
    9,
    3,
    7,
    0,
    6,
    4,
    4,
    3
   ],
   [
    10,
    3,
    8,
    5,
    2,
    6,
    0,
    5,
    5,
    6
   ],
   [
    2,
    1,
    9,
    1,
    1,
    4,
    5,
    0,
    1,
    8
   ],
   [
    4,
    6,
    6,
    9,
    9,
    4,
    5,
    1,
    0,
    10
   ],
   [
    5,
    8,
    9,
    7,
    6,
    3,
    6,
    8,
    10,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Ivory Spire Cathedral",
   "Granite Plaza",
   "Beacon Tower",
   "Horizon Mall",
   "Opal Theater",
   "Copper Clock Square",
   "Twilight Harbor",
   "Silvercrest Observatory",
   "Jasper Marina"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Jasper Marina",
     "Horizon Mall",
     "Copper Clock Square",
     "Ivory Spire Cathedral",
     "Twilight Harbor",
     "Beacon Tower",
     "Granite Plaza",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Twilight Harbor",
     "Silvercrest Observatory",
     "Horizon Mall",
     "Copper Clock Square",
     "Ivory Spire Cathedral",
     "Beacon Tower",
     "Granite Plaza",
     "Jasper Marina",
     "Opal Theater",
     "Warehouse"
    ],
    "ans_distance": 43,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Beacon Tower",
     "Twilight Harbor",
     "Ivory Spire Cathedral",
     "Copper Clock Square",
     "Horizon Mall",
     "Jasper Marina",
     "Granite Plaza",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Opal Theater",
     "Beacon Tower",
     "Twilight Harbor",
     "Ivory Spire Cathedral",
     "Copper Clock Square",
     "Horizon Mall",
     "Jasper Marina",
     "Granite Plaza",
     "Silvercrest Observatory",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Silvercrest Observatory",
     "Twilight Harbor",
     "Ivory Spire Cathedral",
     "Copper Clock Square",
     "Horizon Mall",
     "Jasper Marina",
     "Beacon Tower",
     "Opal Theater",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Twilight Harbor",
     "Silvercrest Observatory",
     "Opal Theater",
     "Jasper Marina",
     "Horizon Mall",
     "Copper Clock Square",
     "Ivory Spire Cathedral",
     "Beacon Tower",
     "Granite Plaza",
     "Warehouse"
    ],
    "ans_distance": 41,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Determine the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 42,
  "adj": [
   [
    0,
    7,
    6,
    7,
    9,
    10,
    7,
    6,
    9,
    6
   ],
   [
    7,
    0,
    9,
    9,
    10,
    10,
    5,
    9,
    4,
    6
   ],
   [
    6,
    9,
    0,
    9,
    7,
    5,
    5,
    2,
    6,
    8
   ],
   [
    7,
    9,
    9,
    0,
    10,
    5,
    5,
    5,
    5,
    6
   ],
   [
    9,
    10,
    7,
    10,
    0,
    6,
    3,
    3,
    8,
    6
   ],
   [
    10,
    10,
    5,
    5,
    6,
    0,
    7,
    6,
    8,
    7
   ],
   [
    7,
    5,
    5,
    5,
    3,
    7,
    0,
    9,
    7,
    4
   ],
   [
    6,
    9,
    2,
    5,
    3,
    6,
    9,
    0,
    5,
    4
   ],
   [
    9,
    4,
    6,
    5,
    8,
    8,
    7,
    5,
    0,
    9
   ],
   [
    6,
    6,
    8,
    6,
    6,
    7,
    4,
    4,
    9,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Gilded Archway",
   "Quarry Point",
   "Jade Fountain",
   "Knight’s Market",
   "Haven Docks",
   "Ivory Spire Cathedral",
   "Lunar Pier",
   "Brass Lantern Tavern",
   "Nimbus Plaza"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "Brass Lantern Tavern",
     "Jade Fountain",
     "Haven Docks",
     "Quarry Point",
     "Lunar Pier",
     "Knight’s Market",
     "Ivory Spire Cathedral",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 44,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quarry Point",
     "Haven Docks",
     "Jade Fountain",
     "Brass Lantern Tavern",
     "Gilded Archway",
     "Ivory Spire Cathedral",
     "Nimbus Plaza",
     "Knight’s Market",
     "Lunar Pier",
     "Warehouse"
    ],
    "ans_distance": 49,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quarry Point",
     "Lunar Pier",
     "Knight’s Market",
     "Ivory Spire Cathedral",
     "Nimbus Plaza",
     "Gilded Archway",
     "Brass Lantern Tavern",
     "Jade Fountain",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 48,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quarry Point",
     "Lunar Pier",
     "Knight’s Market",
     "Ivory Spire Cathedral",
     "Nimbus Plaza",
     "Gilded Archway",
     "Brass Lantern Tavern",
     "Jade Fountain",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 48,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Gilded Archway",
     "Brass Lantern Tavern",
     "Jade Fountain",
     "Haven Docks",
     "Quarry Point",
     "Lunar Pier",
     "Knight’s Market",
     "Ivory Spire Cathedral",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 44,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Quarry Point",
     "Knight’s Market",
     "Haven Docks",
     "Lunar Pier",
     "Nimbus Plaza",
     "Ivory Spire Cathedral",
     "Jade Fountain",
     "Brass Lantern Tavern",
     "Gilded Archway",
     "Warehouse"
    ],
    "ans_distance": 54,
    "cost_time": 1.24
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 43,
  "adj": [
   [
    0,
    2,
    3,
    6,
    7,
    3,
    5,
    5,
    3,
    3
   ],
   [
    2,
    0,
    2,
    1,
    1,
    1,
    2,
    8,
    9,
    4
   ],
   [
    3,
    2,
    0,
    8,
    7,
    10,
    1,
    1,
    5,
    9
   ],
   [
    6,
    1,
    8,
    0,
    7,
    7,
    4,
    5,
    10,
    7
   ],
   [
    7,
    1,
    7,
    7,
    0,
    7,
    2,
    10,
    3,
    2
   ],
   [
    3,
    1,
    10,
    7,
    7,
    0,
    2,
    3,
    1,
    4
   ],
   [
    5,
    2,
    1,
    4,
    2,
    2,
    0,
    1,
    8,
    5
   ],
   [
    5,
    8,
    1,
    5,
    10,
    3,
    1,
    0,
    3,
    3
   ],
   [
    3,
    9,
    5,
    10,
    3,
    1,
    8,
    3,
    0,
    5
   ],
   [
    3,
    4,
    9,
    7,
    2,
    4,
    5,
    3,
    5,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Yarrow Plaza",
   "Dragon’s Gate",
   "Lighthouse Point",
   "Quartz District",
   "Primrose Boulevard",
   "Temple Square",
   "Horizon Mall",
   "Oakshade Library",
   "Moonlit Promenade"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Dragon’s Gate",
     "Horizon Mall",
     "Temple Square",
     "Lighthouse Point",
     "Yarrow Plaza",
     "Primrose Boulevard",
     "Oakshade Library",
     "Quartz District",
     "Moonlit Promenade",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 0.03
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Oakshade Library",
     "Primrose Boulevard",
     "Yarrow Plaza",
     "Dragon’s Gate",
     "Temple Square",
     "Horizon Mall",
     "Moonlit Promenade",
     "Quartz District",
     "Lighthouse Point",
     "Warehouse"
    ],
    "ans_distance": 27,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Lighthouse Point",
     "Temple Square",
     "Dragon’s Gate",
     "Horizon Mall",
     "Primrose Boulevard",
     "Oakshade Library",
     "Quartz District",
     "Moonlit Promenade",
     "Warehouse"
    ],
    "ans_distance": 21,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Lighthouse Point",
     "Temple Square",
     "Dragon’s Gate",
     "Horizon Mall",
     "Primrose Boulevard",
     "Oakshade Library",
     "Quartz District",
     "Moonlit Promenade",
     "Warehouse"
    ],
    "ans_distance": 21,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Moonlit Promenade",
     "Quartz District",
     "Oakshade Library",
     "Horizon Mall",
     "Dragon’s Gate",
     "Temple Square",
     "Lighthouse Point",
     "Yarrow Plaza",
     "Primrose Boulevard",
     "Warehouse"
    ],
    "ans_distance": 22,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Oakshade Library",
     "Primrose Boulevard",
     "Moonlit Promenade",
     "Quartz District",
     "Yarrow Plaza",
     "Horizon Mall",
     "Lighthouse Point",
     "Temple Square",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 32,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Determine the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 44,
  "adj": [
   [
    0,
    9,
    10,
    3,
    5,
    2,
    2,
    3,
    8,
    6
   ],
   [
    9,
    0,
    10,
    9,
    1,
    5,
    8,
    6,
    3,
    8
   ],
   [
    10,
    10,
    0,
    6,
    3,
    3,
    6,
    10,
    9,
    7
   ],
   [
    3,
    9,
    6,
    0,
    10,
    7,
    4,
    2,
    7,
    8
   ],
   [
    5,
    1,
    3,
    10,
    0,
    9,
    3,
    2,
    3,
    3
   ],
   [
    2,
    5,
    3,
    7,
    9,
    0,
    4,
    2,
    10,
    6
   ],
   [
    2,
    8,
    6,
    4,
    3,
    4,
    0,
    4,
    6,
    10
   ],
   [
    3,
    6,
    10,
    2,
    2,
    2,
    4,
    0,
    8,
    4
   ],
   [
    8,
    3,
    9,
    7,
    3,
    10,
    6,
    8,
    0,
    10
   ],
   [
    6,
    8,
    7,
    8,
    3,
    6,
    10,
    4,
    10,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Azure Gardens",
   "Duskwood Park",
   "Dragon’s Gate",
   "Skyline Gardens",
   "Moonlit Promenade",
   "Flare Alley",
   "Rosewood Hall",
   "Primrose Boulevard",
   "Evergreen Circle"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Dragon’s Gate",
     "Rosewood Hall",
     "Moonlit Promenade",
     "Duskwood Park",
     "Evergreen Circle",
     "Skyline Gardens",
     "Azure Gardens",
     "Primrose Boulevard",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 32,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Flare Alley",
     "Primrose Boulevard",
     "Azure Gardens",
     "Skyline Gardens",
     "Evergreen Circle",
     "Duskwood Park",
     "Rosewood Hall",
     "Dragon’s Gate",
     "Moonlit Promenade",
     "Warehouse"
    ],
    "ans_distance": 43,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Moonlit Promenade",
     "Rosewood Hall",
     "Dragon’s Gate",
     "Flare Alley",
     "Skyline Gardens",
     "Azure Gardens",
     "Primrose Boulevard",
     "Duskwood Park",
     "Evergreen Circle",
     "Warehouse"
    ],
    "ans_distance": 39,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Moonlit Promenade",
     "Rosewood Hall",
     "Dragon’s Gate",
     "Flare Alley",
     "Skyline Gardens",
     "Azure Gardens",
     "Primrose Boulevard",
     "Duskwood Park",
     "Evergreen Circle",
     "Warehouse"
    ],
    "ans_distance": 39,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Moonlit Promenade",
     "Flare Alley",
     "Primrose Boulevard",
     "Azure Gardens",
     "Skyline Gardens",
     "Duskwood Park",
     "Evergreen Circle",
     "Rosewood Hall",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Dragon’s Gate",
     "Rosewood Hall",
     "Flare Alley",
     "Primrose Boulevard",
     "Azure Gardens",
     "Evergreen Circle",
     "Skyline Gardens",
     "Duskwood Park",
     "Moonlit Promenade",
     "Warehouse"
    ],
    "ans_distance": 37,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 45,
  "adj": [
   [
    0,
    8,
    3,
    6,
    1,
    4,
    6,
    4,
    10,
    9
   ],
   [
    8,
    0,
    5,
    7,
    8,
    2,
    4,
    5,
    3,
    4
   ],
   [
    3,
    5,
    0,
    1,
    8,
    10,
    2,
    8,
    1,
    7
   ],
   [
    6,
    7,
    1,
    0,
    5,
    6,
    7,
    3,
    8,
    5
   ],
   [
    1,
    8,
    8,
    5,
    0,
    7,
    9,
    2,
    10,
    1
   ],
   [
    4,
    2,
    10,
    6,
    7,
    0,
    10,
    8,
    1,
    9
   ],
   [
    6,
    4,
    2,
    7,
    9,
    10,
    0,
    8,
    10,
    5
   ],
   [
    4,
    5,
    8,
    3,
    2,
    8,
    8,
    0,
    10,
    4
   ],
   [
    10,
    3,
    1,
    8,
    10,
    1,
    10,
    10,
    0,
    1
   ],
   [
    9,
    4,
    7,
    5,
    1,
    9,
    5,
    4,
    1,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Cobalt Market",
   "Beacon Tower",
   "Quarry Point",
   "Primrose Boulevard",
   "Flare Alley",
   "Nimbus Plaza",
   "Riverstone Wharf",
   "Maplewood Conservatory",
   "Umbra Theater"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Umbra Theater",
     "Maplewood Conservatory",
     "Flare Alley",
     "Cobalt Market",
     "Nimbus Plaza",
     "Beacon Tower",
     "Quarry Point",
     "Riverstone Wharf",
     "Warehouse"
    ],
    "ans_distance": 20,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Riverstone Wharf",
     "Quarry Point",
     "Beacon Tower",
     "Nimbus Plaza",
     "Cobalt Market",
     "Flare Alley",
     "Maplewood Conservatory",
     "Umbra Theater",
     "Warehouse"
    ],
    "ans_distance": 26,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Umbra Theater",
     "Maplewood Conservatory",
     "Beacon Tower",
     "Quarry Point",
     "Riverstone Wharf",
     "Cobalt Market",
     "Flare Alley",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 31,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Umbra Theater",
     "Maplewood Conservatory",
     "Beacon Tower",
     "Quarry Point",
     "Riverstone Wharf",
     "Cobalt Market",
     "Flare Alley",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 31,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Riverstone Wharf",
     "Quarry Point",
     "Beacon Tower",
     "Maplewood Conservatory",
     "Umbra Theater",
     "Nimbus Plaza",
     "Cobalt Market",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Primrose Boulevard",
     "Riverstone Wharf",
     "Cobalt Market",
     "Flare Alley",
     "Maplewood Conservatory",
     "Beacon Tower",
     "Nimbus Plaza",
     "Umbra Theater",
     "Quarry Point",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Determine the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 46,
  "adj": [
   [
    0,
    8,
    7,
    2,
    6,
    6,
    8,
    5,
    8,
    10
   ],
   [
    8,
    0,
    9,
    3,
    8,
    6,
    7,
    6,
    3,
    9
   ],
   [
    7,
    9,
    0,
    2,
    8,
    3,
    8,
    7,
    4,
    5
   ],
   [
    2,
    3,
    2,
    0,
    4,
    5,
    9,
    2,
    7,
    5
   ],
   [
    6,
    8,
    8,
    4,
    0,
    8,
    5,
    4,
    8,
    4
   ],
   [
    6,
    6,
    3,
    5,
    8,
    0,
    1,
    3,
    10,
    8
   ],
   [
    8,
    7,
    8,
    9,
    5,
    1,
    0,
    7,
    8,
    7
   ],
   [
    5,
    6,
    7,
    2,
    4,
    3,
    7,
    0,
    1,
    2
   ],
   [
    8,
    3,
    4,
    7,
    8,
    10,
    8,
    1,
    0,
    8
   ],
   [
    10,
    9,
    5,
    5,
    4,
    8,
    7,
    2,
    8,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Copper Clock Square",
   "Flare Alley",
   "Nimbus Plaza",
   "Azure Gardens",
   "Lighthouse Point",
   "Brass Lantern Tavern",
   "Oakshade Library",
   "Yarrow Plaza",
   "Shadowbridge Arcade"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Copper Clock Square",
     "Yarrow Plaza",
     "Oakshade Library",
     "Shadowbridge Arcade",
     "Azure Gardens",
     "Brass Lantern Tavern",
     "Lighthouse Point",
     "Flare Alley",
     "Nimbus Plaza",
     "Warehouse"
    ],
    "ans_distance": 31,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Azure Gardens",
     "Brass Lantern Tavern",
     "Lighthouse Point",
     "Flare Alley",
     "Oakshade Library",
     "Shadowbridge Arcade",
     "Yarrow Plaza",
     "Copper Clock Square",
     "Warehouse"
    ],
    "ans_distance": 43,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Flare Alley",
     "Lighthouse Point",
     "Brass Lantern Tavern",
     "Azure Gardens",
     "Oakshade Library",
     "Yarrow Plaza",
     "Copper Clock Square",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Flare Alley",
     "Lighthouse Point",
     "Brass Lantern Tavern",
     "Azure Gardens",
     "Oakshade Library",
     "Yarrow Plaza",
     "Copper Clock Square",
     "Shadowbridge Arcade",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Brass Lantern Tavern",
     "Lighthouse Point",
     "Flare Alley",
     "Nimbus Plaza",
     "Copper Clock Square",
     "Yarrow Plaza",
     "Oakshade Library",
     "Shadowbridge Arcade",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Nimbus Plaza",
     "Copper Clock Square",
     "Yarrow Plaza",
     "Flare Alley",
     "Oakshade Library",
     "Lighthouse Point",
     "Brass Lantern Tavern",
     "Shadowbridge Arcade",
     "Azure Gardens",
     "Warehouse"
    ],
    "ans_distance": 40,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Determine the optimal delivery route that minimizes the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The delivery driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 47,
  "adj": [
   [
    0,
    5,
    7,
    9,
    4,
    8,
    2,
    9,
    5,
    6
   ],
   [
    5,
    0,
    6,
    3,
    7,
    6,
    10,
    8,
    10,
    3
   ],
   [
    7,
    6,
    0,
    2,
    5,
    2,
    5,
    8,
    1,
    3
   ],
   [
    9,
    3,
    2,
    0,
    4,
    3,
    3,
    4,
    4,
    2
   ],
   [
    4,
    7,
    5,
    4,
    0,
    2,
    4,
    1,
    8,
    3
   ],
   [
    8,
    6,
    2,
    3,
    2,
    0,
    9,
    3,
    8,
    4
   ],
   [
    2,
    10,
    5,
    3,
    4,
    9,
    0,
    8,
    10,
    6
   ],
   [
    9,
    8,
    8,
    4,
    1,
    3,
    8,
    0,
    10,
    2
   ],
   [
    5,
    10,
    1,
    4,
    8,
    8,
    10,
    10,
    0,
    5
   ],
   [
    6,
    3,
    3,
    2,
    3,
    4,
    6,
    2,
    5,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Yarrow Plaza",
   "Zenith Arena",
   "Northwind Tower",
   "Shadowbridge Arcade",
   "Lunar Pier",
   "Dragon’s Gate",
   "Horizon Mall",
   "Flare Alley",
   "Haven Docks"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Dragon’s Gate",
     "Northwind Tower",
     "Yarrow Plaza",
     "Haven Docks",
     "Horizon Mall",
     "Shadowbridge Arcade",
     "Lunar Pier",
     "Zenith Arena",
     "Flare Alley",
     "Warehouse"
    ],
    "ans_distance": 24,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Northwind Tower",
     "Haven Docks",
     "Horizon Mall",
     "Shadowbridge Arcade",
     "Lunar Pier",
     "Zenith Arena",
     "Flare Alley",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Dragon’s Gate",
     "Northwind Tower",
     "Zenith Arena",
     "Flare Alley",
     "Haven Docks",
     "Horizon Mall",
     "Shadowbridge Arcade",
     "Lunar Pier",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Dragon’s Gate",
     "Northwind Tower",
     "Zenith Arena",
     "Flare Alley",
     "Haven Docks",
     "Horizon Mall",
     "Shadowbridge Arcade",
     "Lunar Pier",
     "Yarrow Plaza",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Shadowbridge Arcade",
     "Flare Alley",
     "Zenith Arena",
     "Lunar Pier",
     "Horizon Mall",
     "Haven Docks",
     "Yarrow Plaza",
     "Northwind Tower",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 31,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Yarrow Plaza",
     "Horizon Mall",
     "Shadowbridge Arcade",
     "Haven Docks",
     "Flare Alley",
     "Zenith Arena",
     "Lunar Pier",
     "Northwind Tower",
     "Dragon’s Gate",
     "Warehouse"
    ],
    "ans_distance": 33,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 48,
  "adj": [
   [
    0,
    7,
    8,
    10,
    4,
    6,
    10,
    1,
    6,
    10
   ],
   [
    7,
    0,
    10,
    1,
    2,
    4,
    2,
    5,
    3,
    3
   ],
   [
    8,
    10,
    0,
    8,
    10,
    2,
    7,
    8,
    9,
    9
   ],
   [
    10,
    1,
    8,
    0,
    7,
    2,
    1,
    4,
    10,
    8
   ],
   [
    4,
    2,
    10,
    7,
    0,
    8,
    1,
    8,
    4,
    4
   ],
   [
    6,
    4,
    2,
    2,
    8,
    0,
    1,
    8,
    3,
    3
   ],
   [
    10,
    2,
    7,
    1,
    1,
    1,
    0,
    9,
    2,
    8
   ],
   [
    1,
    5,
    8,
    4,
    8,
    8,
    9,
    0,
    9,
    4
   ],
   [
    6,
    3,
    9,
    10,
    4,
    3,
    2,
    9,
    0,
    7
   ],
   [
    10,
    3,
    9,
    8,
    4,
    3,
    8,
    4,
    7,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Umbra Theater",
   "Haven Docks",
   "Brass Lantern Tavern",
   "Granite Plaza",
   "Pennywhistle Arcade",
   "Nimbus Plaza",
   "Twilight Harbor",
   "Flare Alley",
   "Amber Plaza"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Haven Docks",
     "Pennywhistle Arcade",
     "Brass Lantern Tavern",
     "Umbra Theater",
     "Flare Alley",
     "Nimbus Plaza",
     "Granite Plaza",
     "Amber Plaza",
     "Twilight Harbor",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Nimbus Plaza",
     "Flare Alley",
     "Haven Docks",
     "Pennywhistle Arcade",
     "Brass Lantern Tavern",
     "Umbra Theater",
     "Amber Plaza",
     "Twilight Harbor",
     "Warehouse"
    ],
    "ans_distance": 29,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Twilight Harbor",
     "Brass Lantern Tavern",
     "Umbra Theater",
     "Granite Plaza",
     "Nimbus Plaza",
     "Pennywhistle Arcade",
     "Haven Docks",
     "Flare Alley",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 38,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Twilight Harbor",
     "Brass Lantern Tavern",
     "Umbra Theater",
     "Granite Plaza",
     "Nimbus Plaza",
     "Pennywhistle Arcade",
     "Haven Docks",
     "Flare Alley",
     "Amber Plaza",
     "Warehouse"
    ],
    "ans_distance": 38,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Twilight Harbor",
     "Amber Plaza",
     "Granite Plaza",
     "Nimbus Plaza",
     "Brass Lantern Tavern",
     "Umbra Theater",
     "Flare Alley",
     "Pennywhistle Arcade",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Twilight Harbor",
     "Brass Lantern Tavern",
     "Flare Alley",
     "Nimbus Plaza",
     "Granite Plaza",
     "Umbra Theater",
     "Amber Plaza",
     "Pennywhistle Arcade",
     "Haven Docks",
     "Warehouse"
    ],
    "ans_distance": 36,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled during the delivery route.\"\n}"
 },
 {
  "file_name": "graph_9.json",
  "graph_index": 49,
  "adj": [
   [
    0,
    1,
    10,
    8,
    2,
    6,
    5,
    4,
    4,
    5
   ],
   [
    1,
    0,
    9,
    8,
    6,
    6,
    8,
    6,
    8,
    6
   ],
   [
    10,
    9,
    0,
    2,
    8,
    3,
    3,
    2,
    8,
    6
   ],
   [
    8,
    8,
    2,
    0,
    3,
    7,
    2,
    4,
    8,
    5
   ],
   [
    2,
    6,
    8,
    3,
    0,
    9,
    8,
    9,
    1,
    9
   ],
   [
    6,
    6,
    3,
    7,
    9,
    0,
    9,
    3,
    7,
    5
   ],
   [
    5,
    8,
    3,
    2,
    8,
    9,
    0,
    10,
    7,
    10
   ],
   [
    4,
    6,
    2,
    4,
    9,
    3,
    10,
    0,
    2,
    7
   ],
   [
    4,
    8,
    8,
    8,
    1,
    7,
    7,
    2,
    0,
    3
   ],
   [
    5,
    6,
    6,
    5,
    9,
    5,
    10,
    7,
    3,
    0
   ]
  ],
  "name_list": [
   "Warehouse",
   "Sapphire Arena",
   "King’s Row",
   "Flint Forge Quarter",
   "Granite Plaza",
   "Twilight Harbor",
   "Northwind Tower",
   "Westgate Station",
   "Quarry Point",
   "Oakshade Library"
  ],
  "real_result": {
   "dynamic_programming": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Twilight Harbor",
     "Westgate Station",
     "King’s Row",
     "Northwind Tower",
     "Flint Forge Quarter",
     "Oakshade Library",
     "Quarry Point",
     "Granite Plaza",
     "Warehouse"
    ],
    "ans_distance": 28,
    "cost_time": 0.01
   },
   "christofides_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Quarry Point",
     "Oakshade Library",
     "Westgate Station",
     "King’s Row",
     "Northwind Tower",
     "Flint Forge Quarter",
     "Twilight Harbor",
     "Sapphire Arena",
     "Warehouse"
    ],
    "ans_distance": 34,
    "cost_time": 0.0
   },
   "greedy_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Granite Plaza",
     "Quarry Point",
     "Westgate Station",
     "King’s Row",
     "Flint Forge Quarter",
     "Northwind Tower",
     "Twilight Harbor",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "nearest_neighbor_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Sapphire Arena",
     "Granite Plaza",
     "Quarry Point",
     "Westgate Station",
     "King’s Row",
     "Flint Forge Quarter",
     "Northwind Tower",
     "Twilight Harbor",
     "Oakshade Library",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.0
   },
   "simulated_annealing": {
    "ans_path_text": [
     "Warehouse",
     "Northwind Tower",
     "Flint Forge Quarter",
     "King’s Row",
     "Westgate Station",
     "Quarry Point",
     "Oakshade Library",
     "Twilight Harbor",
     "Sapphire Arena",
     "Granite Plaza",
     "Warehouse"
    ],
    "ans_distance": 35,
    "cost_time": 0.02
   },
   "genetic_algorithm": {
    "ans_path_text": [
     "Warehouse",
     "Granite Plaza",
     "Quarry Point",
     "Oakshade Library",
     "Twilight Harbor",
     "King’s Row",
     "Northwind Tower",
     "Flint Forge Quarter",
     "Westgate Station",
     "Sapphire Arena",
     "Warehouse"
    ],
    "ans_distance": 30,
    "cost_time": 1.23
   }
  },
  "response": "{\n    \"objective\": \"Find the most efficient route for the delivery driver to minimize the total distance traveled while visiting each delivery point exactly once and returning to the warehouse.\",\n    \"constraints\": \"The driver must start and end at the warehouse and visit each of the 9 distinct delivery points exactly once.\",\n    \"optimization\": \"Minimize the total distance traveled.\"\n}"
 }
]